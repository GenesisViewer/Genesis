<llsd>
    <map>
    <key>llAbs</key>
        <map>
        <key>tooltip</key>
            <string>integer llAbs(integer val)
Returns the positive version of val.</string>
        </map>
    <key>llAcos</key>
        <map>
        <key>tooltip</key>
            <string>float llAcos(float val)
Returns the arccosine in radians of val.</string>
        </map>
    <key>llAddToLandBanList</key>
        <map>
        <key>tooltip</key>
            <string>llAddToLandBanList(key avatar, float hours)
Adds avatar to the land ban list for hours, or indefinitely if hours is 0.</string>
        </map>
    <key>llAddToLandPassList</key>
        <map>
        <key>tooltip</key>
            <string>llAddToLandPassList(key avatar, float hours)
Adds avatar to the land pass list for hours, or indefinitely if hours is 0.</string>
        </map>
    <key>llAdjustSoundVolume</key>
        <map>
        <key>tooltip</key>
            <string>llAdjustSoundVolume(float volume)
Adjusts volume of attached sound (0.0 - 1.0).</string>
        </map>
    <key>llAgentInExperience</key>
        <map>
        <key>tooltip</key>
            <string>integer llAgentInExperience(key agent)
Determines whether or not the specified agent is in the script&apos;s experience.</string>
        </map>
    <key>llAllowInventoryDrop</key>
        <map>
        <key>tooltip</key>
            <string>llAllowInventoryDrop(integer add)
If add == TRUE, users without modify permissions can still drop inventory items onto a prim.</string>
        </map>
    <key>llAngleBetween</key>
        <map>
        <key>tooltip</key>
            <string>float llAngleBetween(rotation a, rotation b)
Returns angle between rotation a and b.</string>
        </map>
    <key>llApplyImpulse</key>
        <map>
        <key>tooltip</key>
            <string>llApplyImpulse(vector force, integer local)
Applies impulse to object (if the script is physical), in local coords if local == TRUE.</string>
        </map>
    <key>llApplyRotationalImpulse</key>
        <map>
        <key>tooltip</key>
            <string>llApplyRotationalImpulse(vector force, integer local)
Applies rotational impulse to object (if the script is physical), in local coords if local == TRUE.</string>
        </map>
    <key>llAsin</key>
        <map>
        <key>tooltip</key>
            <string>float llAsin(float val)
Returns the arcsine in radians of val.</string>
        </map>
    <key>llAtan2</key>
        <map>
        <key>tooltip</key>
            <string>float llAtan2(float y, float x)
Returns the arctangent2 of y, x.</string>
        </map>
    <key>llAttachToAvatar</key>
        <map>
        <key>tooltip</key>
            <string>llAttachToAvatar(integer attach_point)
Attaches the object on attach_point to the avatar who has granted permission to the script.</string>
        </map>
    <key>llAttachToAvatarTemp</key>
        <map>
        <key>tooltip</key>
            <string>llAttachToAvatarTemp(integer attach_point)
Attaches the object on attach_point to the avatar who has granted permission to the script. The object will not create new inventory for the user, and will disappear on detach or disconnect.</string>
        </map>
    <key>llAvatarOnLinkSitTarget</key>
        <map>
        <key>tooltip</key>
            <string>key llAvatarOnLinkSitTarget(integer link)
Returns a key that is the UUID of the user seated on the &apos;link&apos;ed prim.
Equivalent to calling llAvatarOnSitTarget on link prim in the link set.</string>
        </map>
    <key>llAvatarOnSitTarget</key>
        <map>
        <key>tooltip</key>
            <string>key llAvatarOnSitTarget()
If an avatar is seated on the sit target, returns the avatar&apos;s key, otherwise NULL_KEY.</string>
        </map>
    <key>llAxes2Rot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llAxes2Rot(vector fwd, vector left, vector up)
Returns the rotation defined by the coordinate axes.</string>
        </map>
    <key>llAxisAngle2Rot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llAxisAngle2Rot(vector axis, float angle)
Returns the rotation that is a generated angle about axis.</string>
        </map>
    <key>llBase64ToInteger</key>
        <map>
        <key>tooltip</key>
            <string>integer llBase64ToInteger(string str)
Returns an integer that is the str Base64 decoded as a big endian integer.</string>
        </map>
    <key>llBase64ToString</key>
        <map>
        <key>tooltip</key>
            <string>string llBase64ToString(string str)
Converts a Base64 string to a conventional string.
If the conversion creates any unprintable characters, they are converted to spaces.</string>
        </map>
    <key>llBreakAllLinks</key>
        <map>
        <key>tooltip</key>
            <string>llBreakAllLinks()
Delinks all prims in the link set (requires that PERMISSION_CHANGE_LINKS be granted).</string>
        </map>
    <key>llBreakLink</key>
        <map>
        <key>tooltip</key>
            <string>llBreakLink(integer linknum)
Delinks the prim with the given link number in a linked object set (requires that PERMISSION_CHANGE_LINKS be granted).</string>
        </map>
    <key>llCSV2List</key>
        <map>
        <key>tooltip</key>
            <string>list llCSV2List(string src)
Creates a list from a string of comma separated values.</string>
        </map>
    <key>llCastRay</key>
        <map>
        <key>tooltip</key>
            <string>list llCastRay(vector start, vector end, list options)
Cast a ray from start to end and report collision data for intersections with objects.</string>
        </map>
    <key>llCeil</key>
        <map>
        <key>tooltip</key>
            <string>integer llCeil(float val)
Returns smallest integer value &gt;= val.</string>
        </map>
    <key>llChar</key>
        <map>
        <key>tooltip</key>
            <string>string llChar(integer val)
Construct a single UTF-32 character string from the supplied Unicode value. Returns &quot;?&quot; (Unicode 0x0F) if val is negative.</string>
        </map>
    <key>llClearCameraParams</key>
        <map>
        <key>tooltip</key>
            <string>llClearCameraParams()
Resets all camera parameters to default values and turns off scripted camera control.</string>
        </map>
    <key>llClearLinkMedia</key>
        <map>
        <key>tooltip</key>
            <string>integer llClearLinkMedia(integer link, integer face)
Clears (deletes) the media and all params from the given face on the linked prim(s).
Returns an integer that is flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) which details the success/failure of the operation(s).</string>
        </map>
    <key>llClearPrimMedia</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llClearPrimMedia(integer face)
Clears (deletes) the media and all params from the given face.</string>
        </map>
    <key>llCloseRemoteDataChannel</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llCloseRemoteDataChannel(key channel)
Closes XML-RPC channel.</string>
        </map>
    <key>llCloud</key>
        <map>
        <key>tooltip</key>
            <string>float llCloud(vector offset)
Returns the cloud density at the object position + offset.</string>
        </map>
    <key>llCollisionFilter</key>
        <map>
        <key>tooltip</key>
            <string>llCollisionFilter(string name, key id, integer accept)
Sets the collision filter, exclusively or inclusively. If accept == TRUE, only accept collisions with objects name and id (either is optional), otherwise with objects not name or id.</string>
        </map>
    <key>llCollisionSound</key>
        <map>
        <key>tooltip</key>
            <string>llCollisionSound(string impact_sound, float impact_volume)
Suppresses default collision sounds, replaces default impact sounds with impact_sound at the volume impact_volume.</string>
        </map>
    <key>llCollisionSprite</key>
        <map>
        <key>tooltip</key>
            <string>llCollisionSprite(string impact_sprite)
Suppresses default collision sprites, replaces default impact sprite with impact_sprite (use an empty string to just suppress).</string>
        </map>
    <key>llCos</key>
        <map>
        <key>tooltip</key>
            <string>float llCos(float theta)
Returns the cosine of theta (theta in radians).</string>
        </map>
    <key>llCreateCharacter</key>
        <map>
        <key>tooltip</key>
            <string>llCreateCharacter(list options)
Creates a pathfinding entity, known as a &quot;character&quot;, from the object containing the script. Required to activate use of pathfinding functions.
&apos;options&apos; is a list containing the configuration options (CHARACTER_DESIRED_SPEED, CHARACTER_RADIUS, CHARACTER_LENGTH, CHARACTER_ORIENTATION, TRAVERSAL_TYPE, CHARACTER_TYPE, CHARACTER_AVOIDANCE_MODE, CHARACTER_MAX_ACCEL, CHARACTER_MAX_DECEL, CHARACTER_DESIRED_TURN_SPEED, CHARACTER_MAX_TURN_RADIUS, CHARACTER_MAX_SPEED, CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES, CHARACTER_STAY_WITHIN_PARCEL), each followed with their associated value.</string>
        </map>
    <key>llCreateKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llCreateKeyValue(string k, string v)
Starts an asynchronous transaction to create a key-value pair associated with the given experience key using the given key and value. Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llCreateLink</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llCreateLink(key target, integer parent)
Attempts to link the script&apos;s object with the target (requires that PERMISSION_CHANGE_LINKS be granted). If parent == TRUE, then the script&apos;s object becomes the root.</string>
        </map>
    <key>llDataSizeKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llDataSizeKeyValue()
Starts an asynchronous transaction to request the used and total amount of data allocated for the experience. Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llDeleteCharacter</key>
        <map>
        <key>tooltip</key>
            <string>llDeleteCharacter()
Convert the object back to a standard object, removing all pathfinding properties.</string>
        </map>
    <key>llDeleteKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llDeleteKeyValue(string k)
Starts an asynchronous transaction to delete a key-value pair associated with the given experience key with the given key. Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llDeleteSubList</key>
        <map>
        <key>tooltip</key>
            <string>list llDeleteSubList(list src, integer start, integer end)
Removes the slice from start to end and returns the remainder of the list.</string>
        </map>
    <key>llDeleteSubString</key>
        <map>
        <key>tooltip</key>
            <string>string llDeleteSubString(string src, integer start, integer end)
Removes the indicated substring and returns the result.</string>
        </map>
    <key>llDetachFromAvatar</key>
        <map>
        <key>tooltip</key>
            <string>llDetachFromAvatar()
Detaches object from avatar.</string>
        </map>
    <key>llDetectedGrab</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedGrab(integer number)
Returns the grab offset of the user touching object (returns &lt;0,0,0&gt; if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedGroup</key>
        <map>
        <key>tooltip</key>
            <string>integer llDetectedGroup(integer number)
Returns an integer that is a boolean representing if the detected object or avatar is in the same group 
that the prim containing the script is set to.</string>
        </map>
    <key>llDetectedKey</key>
        <map>
        <key>tooltip</key>
            <string>key llDetectedKey(integer number)
Returns the key of detected object number (returns empty key if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedLinkNumber</key>
        <map>
        <key>tooltip</key>
            <string>integer llDetectedLinkNumber(integer number)
Returns the link position of the triggered event for touches and collisions only.</string>
        </map>
    <key>llDetectedName</key>
        <map>
        <key>tooltip</key>
            <string>string llDetectedName(integer number)
Returns the name of detected object number (returns empty string if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedOwner</key>
        <map>
        <key>tooltip</key>
            <string>key llDetectedOwner(integer number)
Returns the key of detected object&apos;s owner (returns empty key if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedPos</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedPos(integer number)
Returns the position of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedRot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llDetectedRot(integer number)
Returns the rotation of detected object number (returns &lt;0,0,0,1&gt; if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedTouchBinormal</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedTouchBinormal(integer index)
Returns the surface binormal for a triggered touch event.</string>
        </map>
    <key>llDetectedTouchFace</key>
        <map>
        <key>tooltip</key>
            <string>integer llDetectedTouchFace(integer index)
Returns the index of the face where the avatar clicked in a triggered touch event.</string>
        </map>
    <key>llDetectedTouchNormal</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedTouchNormal(integer index)
Returns the surface normal for a triggered touch event.</string>
        </map>
    <key>llDetectedTouchPos</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedTouchPos(integer index)
Returns the position where the object was touched in a triggered touch event.</string>
        </map>
    <key>llDetectedTouchST</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedTouchST(integer index)
Returns the s and t coordinates in the first two components of a vector, for the surface coordinates where the prim was touched in a triggered touch event.</string>
        </map>
    <key>llDetectedTouchUV</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedTouchUV(integer index)
Returns the u and v coordinates in the first two components of a vector, for the texture coordinates where the prim was touched in a triggered touch event.</string>
        </map>
    <key>llDetectedType</key>
        <map>
        <key>tooltip</key>
            <string>integer llDetectedType(integer number)
Returns the type (AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, SCRIPTED) of detected object (returns 0 if number is not a valid sensed object).</string>
        </map>
    <key>llDetectedVel</key>
        <map>
        <key>tooltip</key>
            <string>vector llDetectedVel(integer number)
Returns the velocity of detected object number (returns &lt;0,0,0&gt; if number is not a valid sensed object).</string>
        </map>
    <key>llDialog</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llDialog(key avatar, string message, list buttons, integer chat_channel)
Shows a dialog box on the avatar&apos;s screen with a message and up to 12 buttons.
If a button is pressed, the avatar says the text of the button label on chat_channel.</string>
        </map>
    <key>llDie</key>
        <map>
        <key>tooltip</key>
            <string>llDie()
Deletes the object.</string>
        </map>
    <key>llDumpList2String</key>
        <map>
        <key>tooltip</key>
            <string>string llDumpList2String(list src, string separator)
Returns the list in a single string, using separator between the entries.</string>
        </map>
    <key>llEdgeOfWorld</key>
        <map>
        <key>tooltip</key>
            <string>integer llEdgeOfWorld(vector pos, vector dir)
Checks to see whether the border hit by dir from pos is the edge of the world (has no neighboring region).</string>
        </map>
    <key>llEjectFromLand</key>
        <map>
        <key>tooltip</key>
            <string>llEjectFromLand(key avatar)
Ejects avatar from the parcel.</string>
        </map>
    <key>llEmail</key>
        <map>
        <key>sleep_time</key>
            <real>20</real>
        <key>tooltip</key>
            <string>llEmail(string address, string subject, string message)
Sends an email to address with the subject and message.</string>
        </map>
    <key>llEscapeURL</key>
        <map>
        <key>tooltip</key>
            <string>string llEscapeURL(string url)
Returns an escaped/encoded version of url, replacing spaces with %20 etc.</string>
        </map>
    <key>llEuler2Rot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llEuler2Rot(vector v)
Returns the rotation representation of Euler Angles v.</string>
        </map>
    <key>llEvade</key>
        <map>
        <key>tooltip</key>
            <string>llEvade(key target, list options)
&apos;target&apos; is the avatar or object UUID to evade.
&apos;options&apos; is currently not used.</string>
        </map>
    <key>llExecCharacterCmd</key>
        <map>
        <key>tooltip</key>
            <string>llExecCharacterCmd(integer command, list options)
Currently known &apos;command&apos;s allow stopping the current pathfinding operation (CHARACTER_CMD_SMOOTH_STOP and CHARACTER_CMD_STOP) or causing the character to jump (CHARACTER_CMD_JUMP).
The &apos;options&apos; list is used to pass command parameters (currenly only used for CHARACTER_CMD_JUMP).</string>
        </map>
    <key>llFabs</key>
        <map>
        <key>tooltip</key>
            <string>float llFabs(float val)
Returns the positive version of val.</string>
        </map>
    <key>llFleeFrom</key>
        <map>
        <key>tooltip</key>
            <string>llFleeFrom(vector position, float distance, list options)
Directs a character to keep a specific &apos;distance&apos; (in meters) from a specific &apos;position&apos; (in region coordinates) in the region or adjacent regions. &apos;options&apos; is currently not used.</string>
        </map>
    <key>llFloor</key>
        <map>
        <key>tooltip</key>
            <string>integer llFloor(float val)
Returns largest integer value &lt;= val.</string>
        </map>
    <key>llForceMouselook</key>
        <map>
        <key>tooltip</key>
            <string>llForceMouselook(integer mouselook)
If mouselook is TRUE, any avatar that sits upon the prim will be forced into mouselook mode.</string>
        </map>
    <key>llFrand</key>
        <map>
        <key>tooltip</key>
            <string>float llFrand(float mag)
Returns a pseudo random number in the range [0,mag[ or ]mag,0].</string>
        </map>
    <key>llGenerateKey</key>
        <map>
        <key>tooltip</key>
            <string>key llGenerateKey()
Returns an unique generated UUID.</string>
        </map>
    <key>llGetAccel</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetAccel()
Returns the acceleration of the object relative to the region&apos;s axes.</string>
        </map>
    <key>llGetAgentInfo</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetAgentInfo(key id)
Returns an integer bitfield containing the agent information about id.
Returns AGENT_FLYING, AGENT_ATTACHMENTS, AGENT_SCRIPTED, AGENT_SITTING, AGENT_ON_OBJECT, AGENT_MOUSELOOK, AGENT_AWAY, AGENT_BUSY, AGENT_TYPING, AGENT_CROUCHING, AGENT_ALWAYS_RUN, AGENT_WALKING and/or AGENT_IN_AIR.</string>
        </map>
    <key>llGetAgentLanguage</key>
        <map>
        <key>tooltip</key>
            <string>string llGetAgentLanguage(key avatar)
Returns the language code of the preferred interface language of the avatar.</string>
        </map>
    <key>llGetAgentList</key>
        <map>
        <key>tooltip</key>
            <string>list llGetAgentList(integer scope, list options)
Returns a list of avatar keys for all agents in the region limited to the area(s) specified by scope, or a list containing an error message string.
scope can be AGENT_LIST_PARCEL, AGENT_LIST_PARCEL_OWNER or AGENT_LIST_REGION.
options is currently unused.</string>
        </map>
    <key>llGetAgentSize</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetAgentSize(key id)
If the avatar is in the same region, returns the size of the bounding box of the requested avatar by id, otherwise returns ZERO_VECTOR.</string>
        </map>
    <key>llGetAlpha</key>
        <map>
        <key>tooltip</key>
            <string>float llGetAlpha(integer face)
Returns the alpha of face.</string>
        </map>
    <key>llGetAndResetTime</key>
        <map>
        <key>tooltip</key>
            <string>float llGetAndResetTime()
Returns the script time in seconds and then resets the script timer to zero.</string>
        </map>
    <key>llGetAnimation</key>
        <map>
        <key>tooltip</key>
            <string>string llGetAnimation(key id)
Returns the name of the currently playing locomotion animation for avatar id.</string>
        </map>
    <key>llGetAnimationList</key>
        <map>
        <key>tooltip</key>
            <string>list llGetAnimationList(key id)
Returns a list of keys of playing animations for avatar described by id.</string>
        </map>
    <key>llGetAnimatedObjectVisualParams</key>
        <map>
        <key>tooltip</key>
            <string>list llGetAnimatedObjectVisualParams(list param_ids)
Takes a list of visual params Ids (integers) in list &apos;param_ids&apos;, and returns a corresponding list of values (floats) for the Animesh object containing the script calling this funtion.</string>
        </map>
    <key>llGetAnimationOverride</key>
        <map>
        <key>tooltip</key>
            <string>string llGetAnimationOverride(string anim_state)
Gets the name of the animation currently set for the given animation state. Requires either of the runtime permissions PERMISSION_OVERRIDE_ANIMATIONS or PERMISSION_TRIGGER_ANIMATION.</string>
        </map>
    <key>llGetAttached</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetAttached()
Returns the object&apos;s attachment point, or 0 if not attached.</string>
        </map>
    <key>llGetAttachedList</key>
        <map>
        <key>tooltip</key>
            <string>list llGetAttachedList(key avatar)
Returns the list of public attachments (root prim UUID) worn by &apos;avatar&apos;. By design HUD attachment keys are not reported by this function.</string>
        </map>
    <key>llGetBoundingBox</key>
        <map>
        <key>tooltip</key>
            <string>list llGetBoundingBox(key object)
Returns the bounding box around the object (including any linked prims) relative to its root prim, in a list in the format [ (vector) min_corner, (vector) max_corner ].</string>
        </map>
    <key>llGetCameraPos</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetCameraPos()
Returns the current camera position for the agent the task has permissions for.</string>
        </map>
    <key>llGetCameraRot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetCameraRot()
Returns the current camera orientation for the agent the task has permissions for.</string>
        </map>
    <key>llGetCenterOfMass</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetCenterOfMass()
Returns the prim&apos;s center of mass (unless called from the root prim, where it returns the object&apos;s center of mass).</string>
        </map>
    <key>llGetClosestNavPoint</key>
        <map>
        <key>tooltip</key>
            <string>list llGetClosestNavPoint(vector point, list options)
Used to get a point on the navmesh that is the closest point to &apos;point&apos;.
Returns a list containing a single vector which is the closest point on the navmesh to the point provided or an empty list.
&apos;point&apos; is in region-local space.
&apos;options&apos; is a list of options (GCNP_RADIUS, GCNP_STATIC, CHARACTER_TYPE), each followed with their associated parameter.</string>
        </map>
    <key>llGetColor</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetColor(integer face)
Returns the color on face.</string>
        </map>
    <key>llGetCreator</key>
        <map>
        <key>tooltip</key>
            <string>key llGetCreator()
Returns a key for the creator of the prim.</string>
        </map>
    <key>llGetDate</key>
        <map>
        <key>tooltip</key>
            <string>string llGetDate()
Returns the current date in the UTC time zone in the format YYYY-MM-DD.</string>
        </map>
    <key>llGetDayLength</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetDayLength()
Returns the number of seconds in the day cycle applied to the current parcel.</string>
        </map>
    <key>llGetDayOffset</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetDayOffset()
Returns the number of seconds added to the current time before calculating the current environmental time for the parcel.</string>
        </map>
    <key>llGetDisplayName</key>
        <map>
        <key>tooltip</key>
            <string>string llGetDisplayName(key id)
Returns the name of an avatar, if the avatar is in the current simulator, otherwise the empty string.</string>
        </map>
    <key>llGetEnergy</key>
        <map>
        <key>tooltip</key>
            <string>float llGetEnergy()
Returns how much energy is in the object as a percentage of maximum.</string>
        </map>
    <key>llGetEnv</key>
        <map>
        <key>tooltip</key>
            <string>string llGetEnv(string name)
Returns a string with the requested data about the region.</string>
        </map>
    <key>llGetEnvironment</key>
        <map>
        <key>tooltip</key>
            <string>list llGetEnvironment(vector pos, list params)
Returns a list containing the current environment values for the parcel and region as a list of attributes. Takes a list of attributes to retrieve in params and returns them in the order requested.</string>
        </map>
    <key>llGetExperienceDetails</key>
        <map>
        <key>tooltip</key>
            <string>list llGetExperienceDetails(key experience_id)
Returns a list of details about the experience. This list has 5 components: string experience_name, key owner_id, key group_id, key experience_id, string state, string state_message.</string>
        </map>
    <key>llGetExperienceErrorMessage</key>
        <map>
        <key>tooltip</key>
            <string>string llGetExperienceErrorMessage(integer error)
Returns a text description of a particular Experience LSL error constant.</string>
        </map>
    <key>llGetExperienceList</key>
        <map>
        <key>tooltip</key>
            <string>list llGetExperienceList(key agent)
Returns the list of experience IDs the agent has accepted. Returns NULL_KEY if called from an object that is not an attachment owned by the agent.</string>
        </map>
    <key>llGetForce</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetForce()
Returns the force (if the script is physical).</string>
        </map>
    <key>llGetFreeMemory</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetFreeMemory()
Returns the number of free bytes of memory the script can use.</string>
        </map>
    <key>llGetFreeURLs</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetFreeURLs()
Returns the number of available URLs for the current script.</string>
        </map>
    <key>llGetGMTclock</key>
        <map>
        <key>tooltip</key>
            <string>float llGetGMTclock()
Returns the time in seconds since midnight GMT.</string>
        </map>
    <key>llGetGeometricCenter</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetGeometricCenter()
Returns the geometric center of the linked set the script is attached to.</string>
        </map>
    <key>llGetHTTPHeader</key>
        <map>
        <key>tooltip</key>
            <string>string llGetHTTPHeader(key request_id, string header)
Returns the value for header for request_id.</string>
        </map>
    <key>llGetInventoryAcquireTime</key>
        <map>
        <key>tooltip</key>
            <string>string llGetInventoryAcquireTime(string item)
Returns a string with the timestamp that the item was added to the prim&apos;s inventory.</string>
        </map>
    <key>llGetInventoryCreator</key>
        <map>
        <key>tooltip</key>
            <string>key llGetInventoryCreator(string item)
Returns a key for the creator of the inventory item.</string>
        </map>
    <key>llGetInventoryKey</key>
        <map>
        <key>tooltip</key>
            <string>key llGetInventoryKey(string name)
Returns the key that is the UUID of the inventory name.</string>
        </map>
    <key>llGetInventoryName</key>
        <map>
        <key>tooltip</key>
            <string>string llGetInventoryName(integer type, integer number)
Returns the name of the inventory item number of a given type.</string>
        </map>
    <key>llGetInventoryNumber</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetInventoryNumber(integer type)
Returns the number of items of a given type (INVENTORY_* flag) in the prim&apos;s inventory.</string>
        </map>
    <key>llGetInventoryPermMask</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetInventoryPermMask(string item, integer mask)
Returns the requested permission mask for the inventory item.</string>
        </map>
    <key>llGetInventoryType</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetInventoryType(string name)
Returns the type of the inventory item name.</string>
        </map>
    <key>llGetKey</key>
        <map>
        <key>tooltip</key>
            <string>key llGetKey()
Returns the key of the prim the script is attached to.</string>
        </map>
    <key>llGetLandOwnerAt</key>
        <map>
        <key>tooltip</key>
            <string>key llGetLandOwnerAt(vector pos)
Returns the key of the land owner, returns NULL_KEY if public.</string>
        </map>
    <key>llGetLinkKey</key>
        <map>
        <key>tooltip</key>
            <string>key llGetLinkKey(integer linknumber)
Returns the key of the linked prim linknumber.</string>
        </map>
    <key>llGetLinkMedia</key>
        <map>
        <key>tooltip</key>
            <string>list llGetLinkMedia(integer link, integer face, list params)
Get the media params for a particular face on a &apos;link&apos;ed prim(s), given the desired list of named params.
Returns a list of values in the order requested (empty list if no media exists on the face).
Takes the same parameters as llGetPrimMediaParams().</string>
        </map>
    <key>llGetLinkName</key>
        <map>
        <key>tooltip</key>
            <string>string llGetLinkName(integer linknumber)
Returns the name of linknumber in a link set.</string>
        </map>
    <key>llGetLinkNumber</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetLinkNumber()
Returns the link number of the prim containing the script (0 means not linked, 1 the prim is the root, 2 the prim is the first child, etc).</string>
        </map>
    <key>llGetLinkNumberOfSides</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetLinkNumberOfSides(integer link)
Similar to llGetNumberOfSides() but applies to any prim in the link set.</string>
        </map>
    <key>llGetLinkPrimitiveParams</key>
        <map>
        <key>tooltip</key>
            <string>list llGetLinkPrimitiveParams(integer link, list params)
Similar to llGetPrimitiveParams() but applies to any prim in the link set and without script delay.</string>
        </map>
    <key>llGetListEntryType</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetListEntryType(list src, integer index)
Returns the type of the index entry in the list
(TYPE_INTEGER, TYPE_FLOAT, TYPE_STRING, TYPE_KEY, TYPE_VECTOR, TYPE_ROTATION, or TYPE_INVALID if index is off list).</string>
        </map>
    <key>llGetListLength</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetListLength(list src)
Returns the number of elements in the list.</string>
        </map>
    <key>llGetLocalPos</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetLocalPos()
Returns the position relative to the root.</string>
        </map>
    <key>llGetLocalRot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetLocalRot()
Returns the rotation local to the root.</string>
        </map>
    <key>llGetMass</key>
        <map>
        <key>tooltip</key>
            <string>float llGetMass()
Returns the mass of object that the script is attached to.</string>
        </map>
    <key>llGetMassMKS</key>
        <map>
        <key>tooltip</key>
            <string>float llGetMassMKS()
Returns a float that is the mass in kilograms of the object the script is attached to.</string>
        </map>
    <key>llGetMaxScaleFactor</key>
        <map>
        <key>tooltip</key>
            <string>float llGetMaxScaleFactor()
Returns the maximum multiplicative scale factor which can be used by llScaleByFactor().</string>
        </map>
    <key>llGetMemoryLimit</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetMemoryLimit()
Get the maximum memory a script can use.
Returns the integer amount of memory the script can use in bytes.</string>
        </map>
    <key>llGetMinScaleFactor</key>
        <map>
        <key>tooltip</key>
            <string>float llGetMinScaleFactor()
Returns the minimum multiplicative scale factor which can be used by llScaleByFactor().</string>
        </map>
    <key>llGetMoonDirection</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetMoonDirection()
Returns a normalized vector to the current moon position at the location of object containing the script.</string>
        </map>
     <key>llGetMoonRotation</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetMoonRotation()
Returns the rotation applied to the moon for the parcel at the location of the object containing the script.</string>
        </map>
   <key>llGetNextEmail</key>
        <map>
        <key>tooltip</key>
            <string>llGetNextEmail(string address, string subject)
Gets the next waiting email that comes from address, with specified subject.</string>
        </map>
    <key>llGetNotecardLine</key>
        <map>
        <key>tooltip</key>
            <string>key llGetNotecardLine(string name, integer line)
Returns line line of notecard name via the dataserver event.</string>
        </map>
    <key>llGetNumberOfNotecardLines</key>
        <map>
        <key>tooltip</key>
            <string>key llGetNumberOfNotecardLines(string name)
Returns number of lines in notecard name via the dataserver event (cast return value to integer).</string>
        </map>
    <key>llGetNumberOfPrims</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetNumberOfPrims()
Returns the number of prims in a link set the script is attached to.</string>
        </map>
    <key>llGetNumberOfSides</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetNumberOfSides()
Returns the number of faces (or sides) of the prim.</string>
        </map>
    <key>llGetObjectAnimationNames</key>
        <map>
        <key>tooltip</key>
            <string>list llGetObjectAnimationNames()
Returns a list of names of animations playing in the current object.</string>
        </map>
    <key>llGetObjectDesc</key>
        <map>
        <key>tooltip</key>
            <string>string llGetObjectDesc()
Returns the description of the prim the script is attached to.</string>
        </map>
    <key>llGetObjectDetails</key>
        <map>
        <key>tooltip</key>
            <string>list llGetObjectDetails(key id, list params)
Returns the object details specified in params for the object with key id or OBJECT_UNKNOWN_DETAIL when passed an invalid object parameter type.
Params are OBJECT_NAME, _DESC, _POS, _ROT, _VELOCITY, _OWNER, _GROUP, _CREATOR, _RUNNING_SCRIPT_COUNT, _TOTAL_SCRIPT_COUNT, _SCRIPT_MEMORY, _SCRIPT_TIME, _PRIM_EQUIVALENCE, _SERVER_COST, _STREAMING_COST, _PHYSICS_COST.</string>
        </map>
    <key>llGetObjectMass</key>
        <map>
        <key>tooltip</key>
            <string>float llGetObjectMass(key id)
Returns the mass of the avatar or object in the region.</string>
        </map>
    <key>llGetObjectName</key>
        <map>
        <key>tooltip</key>
            <string>string llGetObjectName()
Returns the name of the prim which the script is attached to.</string>
        </map>
    <key>llGetObjectPermMask</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetObjectPermMask(integer mask)
Returns the requested permission mask for the root object the task is attached to.</string>
        </map>
    <key>llGetObjectPrimCount</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetObjectPrimCount(key object_id)
Returns the total number of prims for an object in the region.</string>
        </map>
    <key>llGetOmega</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetOmega()
Returns the rotation velocity in radians per second.</string>
        </map>
    <key>llGetOwner</key>
        <map>
        <key>tooltip</key>
            <string>key llGetOwner()
Returns the object owner&apos;s UUID.</string>
        </map>
    <key>llGetOwnerKey</key>
        <map>
        <key>tooltip</key>
            <string>key llGetOwnerKey(key id)
Returns the owner of object id.</string>
        </map>
    <key>llGetParcelDetails</key>
        <map>
        <key>tooltip</key>
            <string>list llGetParcelDetails(vector pos, list params)
Returns the parcel details specified in params for the parcel at pos.
&apos;params&apos; is a list of one or more of PARCEL_DETAILS_* with * among: _NAME, _DESC, _OWNER, _GROUP, _AREA, _ID, _SEE_AVATARS.</string>
        </map>
    <key>llGetParcelFlags</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetParcelFlags(vector pos)
Returns a mask of the parcel flags (PARCEL_FLAG_*) for the parcel that includes the point pos.</string>
        </map>
    <key>llGetParcelMaxPrims</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetParcelMaxPrims(vector pos, integer sim_wide)
Returns the maximum number of prims allowed on the parcel at pos.</string>
        </map>
    <key>llGetParcelMusicURL</key>
        <map>
        <key>tooltip</key>
            <string>string llGetParcelMusicURL()
Gets the streaming audio URL for the parcel which the object is on.</string>
        </map>
    <key>llGetParcelPrimCount</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetParcelPrimCount(vector pos, integer category, integer sim_wide)
Returns the number of prims on the parcel at pos of the given category.
Categories: PARCEL_COUNT_TOTAL, _OWNER, _GROUP, _OTHER, _SELECTED, _TEMP.</string>
        </map>
    <key>llGetParcelPrimOwners</key>
        <map>
        <key>sleep_time</key>
            <real>2</real>
        <key>tooltip</key>
            <string>list llGetParcelPrimOwners(vector pos)
Returns a list of all residents who own objects on the parcel at pos and with individual prim counts.
Requires owner-like permissions for the parcel.</string>
        </map>
    <key>llGetPermissions</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetPermissions()
Returns an integer bitfield with the permissions that have been granted.</string>
        </map>
    <key>llGetPermissionsKey</key>
        <map>
        <key>tooltip</key>
            <string>key llGetPermissionsKey()
Returns the key of the avatar that last granted permissions to the script.</string>
        </map>
    <key>llGetPhysicsMaterial</key>
        <map>
        <key>tooltip</key>
            <string>list llGetPhysicsMaterial()
Returns a list of the object physics properties: [ float gravity_multiplier, float restitution, float friction, float density ].</string>
        </map>
    <key>llGetPos</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetPos()
Returns the position of the task in region coordinates.</string>
        </map>
    <key>llGetPrimMediaParams</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>list llGetPrimMediaParams(integer face, list params)
Returns the media params for a particular face on an object, given the desired list of names, in the order requested.
Returns an empty list if no media exists on the face.</string>
        </map>
    <key>llGetPrimitiveParams</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>list llGetPrimitiveParams(list params)
Returns the primitive parameters specified in the params list.</string>
        </map>
    <key>llGetRegionAgentCount</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetRegionAgentCount()
Returns the number of avatars in the region.</string>
        </map>
    <key>llGetRegionCorner</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetRegionCorner()
Returns a vector in meters that is the global location of the south-west corner of the region which the object is in.</string>
        </map>
     <key>llGetRegionDayLength</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetRegionDayLength()
Returns the number of seconds in the day cycle applied to the current region.</string>
        </map>
     <key>llGetRegionDayOffset</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetRegionDayOffset()
Returns the number of seconds added to the current time before calculating the current environmental time for the region.</string>
        </map>
     <key>llGetRegionMoonDirection</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetRegionMoonDirection()
Returns a normalized vector to the current moon position at the location of object containing the script.</string>
        </map>
     <key>llGetRegionMoonRotation</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetRegionMoonDirection()
Returns the rotation applied to the moon for the region at the location of the object containing the script.</string>
        </map>
     <key>llGetRegionSunDirection</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetRegionSunDirection()
Returns a normalized vector to the current sun position at the location of object containing the script.</string>
        </map>
     <key>llGetRegionSunRotation</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetRegionSunRotation()
Returns the rotation applied to the sun for the region at the location of the object containing the script.</string>
        </map>
   <key>llGetRegionFPS</key>
        <map>
        <key>tooltip</key>
            <string>float llGetRegionFPS()
Returns the mean region frames per second.</string>
        </map>
    <key>llGetRegionFlags</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetRegionFlags()
Returns the region flags (REGION_FLAG_*) for the region the object is in.</string>
        </map>
    <key>llGetRegionName</key>
        <map>
        <key>tooltip</key>
            <string>string llGetRegionName()
Returns the current region name.</string>
        </map>
    <key>llGetRegionTimeDilation</key>
        <map>
        <key>tooltip</key>
            <string>float llGetRegionTimeDilation()
Returns the current time dilation as a float between 0.0 (full dilation) and 1.0 (no dilation).</string>
        </map>
    <key>llGetRootPosition</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetRootPosition()
Returns the position (in region coordinates) of the root prim of the object which the script is attached to.</string>
        </map>
    <key>llGetRootRotation</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetRootRotation()
Returns the rotation (relative to the region) of the root prim of the object which the script is attached to.</string>
        </map>
    <key>llGetRot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetRot()
Returns the rotation relative to the region&apos;s axes.</string>
        </map>
    <key>llGetSPMaxMemory</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetSPMaxMemory()
Returns the integer of the most bytes used while llScriptProfiler() was last active.
Only relevant for Mono-compiled scripts.</string>
        </map>
    <key>llGetScale</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetScale()
Returns the scale of the prim.</string>
        </map>
    <key>llGetScriptName</key>
        <map>
        <key>tooltip</key>
            <string>string llGetScriptName()
Returns the name of the script that this function is used in.</string>
        </map>
    <key>llGetScriptState</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetScriptState(string name)
Returns TRUE if the script name is running.</string>
        </map>
    <key>llGetSimStats</key>
        <map>
        <key>tooltip</key>
            <string>float llGetSimStats(integer stat_type)
Returns the simulator statistics corresponding to the stat_type (currently only SIM_STAT_PCT_CHARS_STEPPED).</string>
        </map>
    <key>llGetSimulatorHostname</key>
        <map>
        <key>sleep_time</key>
            <real>10</real>
        <key>tooltip</key>
            <string>string llGetSimulatorHostname()
Returns the hostname of the machine which the script is running on (same as string in viewer Help dialog).</string>
        </map>
    <key>llGetStartParameter</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetStartParameter()
Returns an integer that is the script start/rez parameter.</string>
        </map>
    <key>llGetStaticPath</key>
        <map>
        <key>tooltip</key>
            <string>list llGetStaticPath(vector start, vector end, float radius, list params)
Returns a list of position vectors indicating pathfinding waypoints between positions at start and end, for a character of a given radius. The waypoints this function returns are for the &apos;static&apos; nav mesh, meaning that dynamic objects are ignored.</string>
        </map>
    <key>llGetStatus</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetStatus(integer status)
Returns value of status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_BLOCK_GRAB_OBJECT, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z).</string>
        </map>
    <key>llGetSubString</key>
        <map>
        <key>tooltip</key>
            <string>string llGetSubString(string src, integer start, integer end)
Returns the indicated substring.</string>
        </map>
    <key>llGetSunDirection</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetSunDirection()
Returns a normalized vector to the current sun position at the location of object containing the script.</string>
        </map>
    <key>llGetSunRotation</key>
        <map>
        <key>tooltip</key>
            <string>rotation llGetSunRotation()
Returns the rotation applied to the sun for the parcel at the location of the object containing the script.</string>
        </map>
    <key>llGetTexture</key>
        <map>
        <key>tooltip</key>
            <string>string llGetTexture(integer face)
Returns a string that is the texture on face (the inventory name if it is a texture in the prim&apos;s inventory, otherwise the key).</string>
        </map>
    <key>llGetTextureOffset</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetTextureOffset(integer face)
Returns the texture offset of face in the x and y components of a vector.</string>
        </map>
    <key>llGetTextureRot</key>
        <map>
        <key>tooltip</key>
            <string>float llGetTextureRot(integer side)
Returns the texture rotation of side.</string>
        </map>
    <key>llGetTextureScale</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetTextureScale(integer side)
Returns the texture scale of side in the x and y components of a vector.</string>
        </map>
    <key>llGetTime</key>
        <map>
        <key>tooltip</key>
            <string>float llGetTime()
Returns the time in seconds since the last region reset, script reset, or call to either llResetTime or llGetAndResetTime.</string>
        </map>
    <key>llGetTimeOfDay</key>
        <map>
        <key>tooltip</key>
            <string>float llGetTimeOfDay()
Returns the time in seconds since sim server midnight or since region up-time, whichever is smaller.</string>
        </map>
    <key>llGetTimestamp</key>
        <map>
        <key>tooltip</key>
            <string>string llGetTimestamp()
Returns the timestamp in the UTC time zone in the format: YYYY-MM-DDThh:mm:ss.ff..fZ.</string>
        </map>
    <key>llGetTorque</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetTorque()
Returns the torque (if the script is physical).</string>
        </map>
    <key>llGetUnixTime</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetUnixTime()
Returns the number of seconds elapsed since 00:00 hours, Jan 1, 1970 UTC from the system clock.</string>
        </map>
    <key>llGetUsedMemory</key>
        <map>
        <key>tooltip</key>
            <string>integer llGetUsedMemory()
Returns the integer of the number of bytes of memory currently in use by the script.
Only relevant for Mono-compiled scripts.</string>
        </map>
    <key>llGetUsername</key>
        <map>
        <key>tooltip</key>
            <string>string llGetUsername(key id)
Returns the single-word username of an avatar, if the avatar is in the current region, otherwise the empty string.</string>
        </map>
    <key>llGetVel</key>
        <map>
        <key>tooltip</key>
            <string>vector llGetVel()
Returns the velocity of the object.</string>
        </map>
     <key>llGetVisualParams</key>
        <map>
        <key>tooltip</key>
            <string>list llGetVisualParams(key agent_id, list params)
Returns a list of the details for agent_id, requested in params.</string>
        </map>
   <key>llGetWallclock</key>
        <map>
        <key>tooltip</key>
            <string>float llGetWallclock()
Returns the time in seconds since midnight California Pacific time (PST/PDT).</string>
        </map>
    <key>llGiveInventory</key>
        <map>
        <key>tooltip</key>
            <string>llGiveInventory(key destination, string inventory)
Gives inventory to destination.</string>
        </map>
    <key>llGiveInventoryList</key>
        <map>
        <key>sleep_time</key>
            <real>3</real>
        <key>tooltip</key>
            <string>llGiveInventoryList(key target, string folder, list inventory)
Gives inventory items to target, creating a new folder to put them in.</string>
        </map>
    <key>llGiveMoney</key>
        <map>
        <key>tooltip</key>
            <string>llGiveMoney(key destination, integer amount)
Transfers amount of L$ from script owner to destination.</string>
        </map>
    <key>llGodLikeRezObject</key>
        <map>
        <key>god_only</key>
            <boolean>1</boolean>
        <key>tooltip</key>
            <string>llGodLikeRezObject(key inventory, vector pos)
Rezzes directly off of UUID if owner is in God Mode.</string>
        </map>
    <key>llGround</key>
        <map>
        <key>tooltip</key>
            <string>float llGround(vector offset)
Returns the ground height below the object position + offset.</string>
        </map>
    <key>llGroundContour</key>
        <map>
        <key>tooltip</key>
            <string>vector llGroundCountour(vector offset)
Returns the ground contour direction below the object position + offset.</string>
        </map>
    <key>llGroundNormal</key>
        <map>
        <key>tooltip</key>
            <string>vector llGroundNormal(vector offset)
Returns the ground normal below the object position + offset.</string>
        </map>
    <key>llGroundRepel</key>
        <map>
        <key>tooltip</key>
            <string>llGroundRepel(float height, integer water, float tau)
Critically damps to height if within height*0.5 of level (either above ground level, or above the higher of land and water if water == TRUE).</string>
        </map>
    <key>llGroundSlope</key>
        <map>
        <key>tooltip</key>
            <string>vector llGroundSlope(vector offset)
Returns the ground slope below the object position + offset.</string>
        </map>
    <key>llHash</key>
        <map>
        <key>tooltip</key>
            <string>integer llHash(string val)
Returns a 32 bits hash for the provided string. Returns 0 if the input string is empty.</string>
        </map>
    <key>llHTTPRequest</key>
        <map>
        <key>tooltip</key>
            <string>llHTTPRequest(string url, list parameters, string body)
Sends an HTTP request to the specified url with the body of the request and parameters.</string>
        </map>
    <key>llHTTPResponse</key>
        <map>
        <key>tooltip</key>
            <string>llHTTPResponse(key request_id, integer status, string body)
Responds to request_id with status and body.</string>
        </map>
    <key>llInsertString</key>
        <map>
        <key>tooltip</key>
            <string>string llInsertString(string dst, integer position, string src)
Returns a destination string dst with the string src inserted starting at position pos.</string>
        </map>
    <key>llInstantMessage</key>
        <map>
        <key>sleep_time</key>
            <real>2</real>
        <key>tooltip</key>
            <string>llInstantMessage(key user, string message)
Sends the specified string as an Instant Message to the user.</string>
        </map>
    <key>llIntegerToBase64</key>
        <map>
        <key>tooltip</key>
            <string>string llIntegerToBase64(integer number)
Returns a string that is a Base64 big endian encode of number.</string>
        </map>
    <key>llJson2List</key>
        <map>
        <key>tooltip</key>
            <string>list llJson2List(string json)
Converts a JSON compound value (either an array or an object) to an LSL List.
&apos;json&apos; is a string containing a valid JSON array or object value.
If the string in &apos;json&apos; is not a valid JSON object or array, a list with a single item matching the conversion above is returned.</string>
        </map>
    <key>llJsonGetValue</key>
        <map>
        <key>tooltip</key>
            <string>string llJsonGetValue(string json, list specifiers)
Directly extracts a JSON value to a string. Returns the extracted JSON string.
&apos;json&apos; is a string containing a valid JSON array or object value.
&apos;specifiers&apos; is a list of specifiers.</string>
        </map>
    <key>llJsonSetValue</key>
        <map>
        <key>tooltip</key>
            <string>string llJsonSetValue(string json, list specifiers, string value)
Directly sets a JSON value within a string. Returns the newly modified JSON string.
&apos;json&apos; is a string containing a valid JSON array or object value.
&apos;specifiers&apos; is a list of specifiers.
&apos;value&apos; is the value to be inserted into the specified place in JSON.</string>
        </map>
    <key>llJsonValueType</key>
        <map>
        <key>tooltip</key>
            <string>string llJsonValueType(string json, list specifiers)
Determines the type of a JSON value.
&apos;json&apos; is a string containing a valid JSON array or object value.
&apos;specifiers&apos; is a list of specifiers.
Returns a special string constant among: JSON_INVALID, JSON_OBJECT, JSON_ARRAY, JSON_NUMBER, JSON_STRING, JSON_TRUE, JSON_FALSE and JSON_NULL.</string>
        </map>
    <key>llKey2Name</key>
        <map>
        <key>tooltip</key>
            <string>string llKey2Name(key id)
Returns the name of the prim or avatar specified by id.
(The id must be a valid rezzed prim or avatar key in the current simulator, otherwise an empty string is returned.).</string>
        </map>
    <key>llKeyCountKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llKeyCountKeyValue()
Starts an asynchronous transaction to request the number of experience keys in the system. Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llKeysKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llKeysKeyValue(integer first, integer count)
Starts an asynchronous transaction to request a number of experience keys. Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llLinkParticleSystem</key>
        <map>
        <key>tooltip</key>
            <string>llLinkParticleSystem(integer link, list params)
Similar to llParticleSystem() but applies to any prim in the link set.</string>
        </map>
    <key>llLinkSitTarget</key>
        <map>
        <key>tooltip</key>
            <string>llLinkSitTarget(integer link, vector offset, rotation rot)
Set the sit location for the &apos;link&apos;ed prim(s). The sit location is relative to the prim&apos;s position and rotation.
Equivalent to calling llSitTarget on link prim(s) in the link set.</string>
        </map>
    <key>llList2CSV</key>
        <map>
        <key>tooltip</key>
            <string>string llList2CSV(list src)
Creates a string of comma separated values from list.</string>
        </map>
    <key>llList2Float</key>
        <map>
        <key>tooltip</key>
            <string>float llList2Float(list src, integer index)
Copies the float at index in the list.</string>
        </map>
    <key>llList2Integer</key>
        <map>
        <key>tooltip</key>
            <string>integer llList2Integer(list src, integer index)
Copies the integer at index in the list.</string>
        </map>
    <key>llList2Json</key>
        <map>
        <key>tooltip</key>
            <string>string llList2Json(string type, list values)
Converts a list to JSON.
&apos;type&apos; must be either JSON_ARRAY or JSON_OBJECT.
&apos;specifiers&apos; is a list of specifiers.
&apos;values&apos; is the list to be converted to JSON.
Returns JSON_INVALID if any other string or json type is specified as the type.</string>
        </map>
    <key>llList2Key</key>
        <map>
        <key>tooltip</key>
            <string>key llList2Key(list src, integer index)
Copies the key at index in the list.</string>
        </map>
    <key>llList2List</key>
        <map>
        <key>tooltip</key>
            <string>list llList2List(list src, integer start, integer end)
Copies the slice of the list from start to end.</string>
        </map>
    <key>llList2ListStrided</key>
        <map>
        <key>tooltip</key>
            <string>list llList2ListStrided(list src, integer start, integer end, integer stride)
Copies the strided slice of the list from start to end.</string>
        </map>
    <key>llList2Rot</key>
        <map>
        <key>tooltip</key>
            <string>rotation llList2Rot(list src, integer index)
Copies the rotation at index in the list.</string>
        </map>
    <key>llList2String</key>
        <map>
        <key>tooltip</key>
            <string>string llList2String(list src, integer index)
Copies the string at index in the list.</string>
        </map>
    <key>llList2Vector</key>
        <map>
        <key>tooltip</key>
            <string>vector llList2Vector(list src, integer index)
Copies the vector at index in the list.</string>
        </map>
    <key>llListFindList</key>
        <map>
        <key>tooltip</key>
            <string>integer llListFindList(list src, list test)
Returns the index of the first instance of test in src.
(Returns -1 if not found).</string>
        </map>
    <key>llListInsertList</key>
        <map>
        <key>tooltip</key>
            <string>list llListInsertList(list dest, list src, integer start)
Returns a list that contains all the elements from dest but with the elements from src inserted at position start.</string>
        </map>
    <key>llListRandomize</key>
        <map>
        <key>tooltip</key>
            <string>list llListRandomize(list src, integer stride)
Returns a randomized list of blocks of size stride.</string>
        </map>
    <key>llListReplaceList</key>
        <map>
        <key>tooltip</key>
            <string>list llListReplaceList(list dest, list src, integer start, integer end)
Returns a list that is dest with start through end removed and src inserted at start.</string>
        </map>
    <key>llListSort</key>
        <map>
        <key>tooltip</key>
            <string>list llListSort(list src, integer stride, integer ascending)
Sorts the list into blocks of stride, in ascending order if ascending == TRUE.
The sort order is affected by type.</string>
        </map>
    <key>llListen</key>
        <map>
        <key>tooltip</key>
            <string>integer llListen(integer channel, string name, key id, string msg)
Sets a callback for msg on channel from name and id (name, id, and/or msg can be empty) and returns an identifier that can be used to deactivate or remove the listen.</string>
        </map>
    <key>llListenControl</key>
        <map>
        <key>tooltip</key>
            <string>llListenControl(integer number, integer active)
Makes a listen event callback active or inactive.</string>
        </map>
    <key>llListenRemove</key>
        <map>
        <key>tooltip</key>
            <string>llListenRemove(integer number)
Removes listen event callback number.</string>
        </map>
    <key>llLoadURL</key>
        <map>
        <key>sleep_time</key>
            <real>10</real>
        <key>tooltip</key>
            <string>llLoadURL(key avatar, string message, string url)
Shows a dialog to avatar offering to load the web page at url with a message.
If user clicks yes, launches the page in their web browser.</string>
        </map>
    <key>llLog</key>
        <map>
        <key>tooltip</key>
            <string>float llLog(float val)
Returns the natural logarithm of val.  Returns zero if val &lt;= 0.</string>
        </map>
    <key>llLog10</key>
        <map>
        <key>tooltip</key>
            <string>float llLog10(float val)
Returns the base 10 logarithm of val.  Returns zero if val &lt;= 0.</string>
        </map>
    <key>llLookAt</key>
        <map>
        <key>tooltip</key>
            <string>llLookAt(vector target, float strength, float damping)
Causes object to point its up axis (positive z) towards target, while keeping its forward axis (positive x) below the horizon.</string>
        </map>
    <key>llLoopSound</key>
        <map>
        <key>tooltip</key>
            <string>llLoopSound(string sound, float volume)
Plays attached sound looping indefinitely at volume (0.0 - 1.0).</string>
        </map>
    <key>llLoopSoundMaster</key>
        <map>
        <key>tooltip</key>
            <string>llLoopSoundMaster(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), declares it a sync master.</string>
        </map>
    <key>llLoopSoundSlave</key>
        <map>
        <key>tooltip</key>
            <string>llLoopSoundSlave(string sound, float volume)
Plays attached sound looping at volume (0.0 - 1.0), synced to most audible sync master.</string>
        </map>
    <key>llMD5String</key>
        <map>
        <key>tooltip</key>
            <string>string llMD5String(string src, integer nonce)
Returns a string of 32 hex characters that is a RSA Data Security, Inc. MD5 Message-Digest Algorithm of src with nonce.</string>
        </map>
    <key>llMakeExplosion</key>
        <map>
        <key>tooltip</key>
            <string>llMakeExplosion(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes a round explosion of particles.</string>
        </map>
    <key>llMakeFire</key>
        <map>
        <key>tooltip</key>
            <string>llMakeFire(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes fire like particles.</string>
        </map>
    <key>llMakeFountain</key>
        <map>
        <key>tooltip</key>
            <string>llMakeFountain(integer particles, float scale, float vel, float lifetime, float arc, integer bounce, string texture, vector offset, float bounce_offset)
Makes a fountain of particles.</string>
        </map>
    <key>llMakeSmoke</key>
        <map>
        <key>tooltip</key>
            <string>llMakeSmoke(integer particles, float scale, float vel, float lifetime, float arc, string texture, vector offset)
Makes smoke like particles.</string>
        </map>
    <key>llManageEstateAccess</key>
        <map>
        <key>tooltip</key>
            <string>integer llManageEstateAccess(integer action, key id)
To add or remove agents from the estate&apos;s agent access or ban lists or groups from the estate&apos;s group access list.
Only works for objects owned by the Estate Owner or an Estate Manager.
Returns TRUE if successful and FALSE if throttled, on invalid action, on invalid or null id, or if object owner is not allowed to manage the estate.
&apos;action&apos; can be any of: ESTATE_ACCESS_ALLOWED_[AGENT/GROUP]_[ADD/REMOVE] or ESTATE_ACCESS_BANNED_AGENT_[ADD/REMOVE].</string>
        </map>
    <key>llMapDestination</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llMapDestination(string simname, vector pos, vector look_at)
Opens the World Map centered on the region simname with pos highlighted. (NOTE: look_at currently does nothing.)
Only works for scripts attached to avatar, or during touch events.</string>
        </map>
    <key>llMessageLinked</key>
        <map>
        <key>tooltip</key>
            <string>llMessageLinked(integer linknum, integer num, string str, key id)
Allows scripts in the same object to communicate. Triggers a link_message event with the same parameters num, str, and id in all scripts in the prim(s) described by linknum.</string>
        </map>
    <key>llMinEventDelay</key>
        <map>
        <key>tooltip</key>
            <string>llMinEventDelay(float delay)
Sets the minimum time between events being handled.</string>
        </map>
    <key>llModPow</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>integer llModPow(integer a, integer b, integer c)
Returns a raised to the b power, mod c. ( (a**b)%c )
b is capped at 0xFFFF (16 bits).</string>
        </map>
    <key>llModifyLand</key>
        <map>
        <key>tooltip</key>
            <string>llModifyLand(integer action, integer brush)
Modifies land using the specified action on the specified brush size of land.</string>
        </map>
    <key>llMoveToTarget</key>
        <map>
        <key>tooltip</key>
            <string>llMoveToTarget(vector target, float tau)
Critically damps to target in tau seconds (if the script is physical).</string>
        </map>
    <key>llName2Key</key>
        <map>
        <key>tooltip</key>
            <string>key llName2Key(string name)
Returns the Agent ID key for the named agent in the region or NULL_KEY if no matching agent is in the region. Legacy names (with or without "Resident" for new residents) or user names may be passed to this function, case insensitive.</string>
        </map>
    <key>llNavigateTo</key>
        <map>
        <key>tooltip</key>
            <string>llNavigateTo(vector pos, list options)
Directs an object to travel to a defined position in the region or adjacent regions.
&apos;pos&apos; is the position in region coordinates for the character to navigate to.
&apos;options&apos; is a list of options (FORCE_DIRECT_PATH only for now), each followed with their associated parameter.</string>
        </map>
    <key>llOffsetTexture</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llOffsetTexture(float u, float v, integer face)
Sets the texture u &amp; v offsets for the chosen face or ALL_SIDES.</string>
        </map>
    <key>llOpenFloater</key>
        <map>
        <key>tooltip</key>
            <string>llOpenFloater(string title, string url, list params)
Sends a request to the viewer to open a new floater with the provided title. This function must be called from a script running within an attachment and be compiled as part of a PRIVILEGED experience. If the request was successfully sent to the viewer this function will return 0, and NOT_EXPERIENCE, NOT_ATTACHMENT, BAD_AGENT or NOT_EXPERIENCE_PERMISSIONS on failure.</string>
        </map>
    <key>llOpenRemoteDataChannel</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llOpenRemoteDataChannel()
Creates a channel to listen for XML-RPC calls, and will trigger a remote_data event with channel id once it is available.</string>
        </map>
    <key>llOrd</key>
        <map>
        <key>tooltip</key>
            <string>integer llOrd(string val, integer index)
Calculates the ordinal value for a character in a string. The returned value is the UTF-32 value of the character at the specified index. If index is outside the bounds of the string, this function returns 0.</string>
        </map>
    <key>llOverMyLand</key>
        <map>
        <key>tooltip</key>
            <string>integer llOverMyLand(key id)
Returns TRUE if id is over land owned by the script owner, otherwise FALSE.</string>
        </map>
    <key>llOwnerSay</key>
        <map>
        <key>tooltip</key>
            <string>llOwnerSay(string msg)
Says msg to owner only.  (Owner must be in the same region.).</string>
        </map>
    <key>llParcelMediaCommandList</key>
        <map>
        <key>sleep_time</key>
            <real>2</real>
        <key>tooltip</key>
            <string>llParcelMediaCommandList(list command)
Sends a list of commands, some with arguments, to a parcel to control the playback of movies and other media.</string>
        </map>
    <key>llParcelMediaQuery</key>
        <map>
        <key>sleep_time</key>
            <real>2</real>
        <key>tooltip</key>
            <string>list llParcelMediaQuery(list query)
Returns a list containing results of the sent query.</string>
        </map>
    <key>llParseString2List</key>
        <map>
        <key>tooltip</key>
            <string>list llParseString2List(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers
(separators and spacers must be lists of strings, maximum of 8 each).</string>
        </map>
    <key>llParseStringKeepNulls</key>
        <map>
        <key>tooltip</key>
            <string>list llParseStringKeepNulls(string src, list separators, list spacers)
Breaks src into a list, discarding separators, keeping spacers, keeping any null values generated.
(separators and spacers must be lists of strings, maximum of 8 each).</string>
        </map>
    <key>llParticleSystem</key>
        <map>
        <key>tooltip</key>
            <string>llParticleSystem(list rules)
Creates a particle system based on rules.  An empty list removes the particle system.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ].</string>
        </map>
    <key>llPassCollisions</key>
        <map>
        <key>tooltip</key>
            <string>llPassCollisions(integer pass)
If pass == TRUE, collisions are passed from children on to parents (default is FALSE).</string>
        </map>
    <key>llPassTouches</key>
        <map>
        <key>tooltip</key>
            <string>llPassTouches(integer pass)
If pass == TRUE, touches are passed from children on to parents.</string>
        </map>
    <key>llPatrolPoints</key>
        <map>
        <key>tooltip</key>
            <string>llPatrolPoints(list points, list options)
Sets the object patrolling between the points specified in points.
&apos;points&apos; is a list of vectors for the character to travel through sequentially. The list must contain at least two entries.
&apos;options&apos; is a list of options (PATROL_PAUSE_AT_WAYPOINTS only for now), each followed with their associated parameter.</string>
        </map>
    <key>llPlaySound</key>
        <map>
        <key>tooltip</key>
            <string>llPlaySound(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0).</string>
        </map>
    <key>llPlaySoundSlave</key>
        <map>
        <key>tooltip</key>
            <string>llPlaySoundSlave(string sound, float volume)
Plays attached sound once at volume (0.0 - 1.0), synced to next loop of most audible sync master.</string>
        </map>
    <key>llPointAt</key>
        <map>
        <key>tooltip</key>
            <string>llPointAt(vector pos)
Makes agent that owns object point at pos.</string>
        </map>
    <key>llPow</key>
        <map>
        <key>tooltip</key>
            <string>float llPow(float base, float exponent)
Returns the base raised to the power exponent, or returns 0 and triggers Math Error for imaginary results.</string>
        </map>
    <key>llPreloadSound</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llPreloadSound(string sound)
Preloads a sound on viewers within range.</string>
        </map>
    <key>llPursue</key>
        <map>
        <key>tooltip</key>
            <string>llPursue(key target, list options)
&apos;target&apos; is the avatar or object UUID to pursue
&apos;options&apos; is a list of options (PURSUIT_OFFSET, REQUIRE_LINE_OF_SIGHT, PURSUIT_FUZZ_FACTOR, PURSUIT_INTERCEPT, PURSUIT_GOAL_TOLERANCE), each followed with their associated value.</string>
        </map>
    <key>llPushObject</key>
        <map>
        <key>tooltip</key>
            <string>llPushObject(key id, vector impulse, vector ang_impulse, integer local)
Applies impulse and ang_impulse to object id.</string>
        </map>
    <key>llReadKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llReadKeyValue(string k)
Starts an asynchronous transaction to read the value associated with the specified key and the specified experience. Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llRefreshPrimURL</key>
        <map>
        <key>sleep_time</key>
            <real>20</real>
        <key>tooltip</key>
            <string>llRefreshPrimURL()
Reloads the web page shown on the sides of the object.</string>
        </map>
    <key>llRegionSay</key>
        <map>
        <key>tooltip</key>
            <string>llRegionSay(integer channel, string msg)
Broadcasts msg on channel (not 0) that can be heard anywhere in the region by a script listening on channel.</string>
        </map>
    <key>llRegionSayTo</key>
        <map>
        <key>tooltip</key>
            <string>llRegionSayTo(key target, integer channel, string message)
Sends message on channel (not DEBUG_CHANNEL) directly to prim or avatar target anywhere within the region.</string>
        </map>
    <key>llReleaseCamera</key>
        <map>
        <key>tooltip</key>
            <string>llReleaseCamera(key avatar)
Returns camera to agent avatar.</string>
        </map>
    <key>llReleaseControls</key>
        <map>
        <key>tooltip</key>
            <string>llReleaseControls()
Stops taking inputs that were taken with llTakeControls.</string>
        </map>
    <key>llReleaseURL</key>
        <map>
        <key>tooltip</key>
            <string>llReleaseURL(string url)
Releases the specified URL, it will no longer be usable.</string>
        </map>
    <key>llRemoteDataReply</key>
        <map>
        <key>sleep_time</key>
            <real>3</real>
        <key>tooltip</key>
            <string>llRemoteDataReply(key channel, key message_id, string sdata, integer idata)
Sends an XML-RPC reply to message_id on channel with payload of string sdata and integer idata.</string>
        </map>
    <key>llRemoteDataSetRegion</key>
        <map>
        <key>tooltip</key>
            <string>llRemoteDataSetRegion()
DEPRECATED !  Please use llOpenRemoteDataChannel instead.
If an object using remote data channels changes regions, you must call this function to reregister the remote data channels. This call is not needed if the prim does not change regions.</string>
        </map>
    <key>llRemoteLoadScript</key>
        <map>
        <key>sleep_time</key>
            <real>3</real>
        <key>tooltip</key>
            <string>DEPRECATED!  Please use llRemoteLoadScriptPin instead.</string>
        </map>
    <key>llRemoteLoadScriptPin</key>
        <map>
        <key>sleep_time</key>
            <real>3</real>
        <key>tooltip</key>
            <string>llRemoteLoadScriptPin(key target, string name, integer pin, integer running, integer start_param)
Copies script name onto target, if the owner of this scripted object can modify target and is in the same region, and the matching pin is used.
If running == TRUE, starts the script with start_param.</string>
        </map>
    <key>llRemoveFromLandBanList</key>
        <map>
        <key>tooltip</key>
            <string>llRemoveFromLandBanList(key avatar)
Removes avatar from the land ban list.</string>
        </map>
    <key>llRemoveFromLandPassList</key>
        <map>
        <key>tooltip</key>
            <string>llRemoveFromLandPassList(key avatar)
Removes avatar from the land pass list.</string>
        </map>
    <key>llRemoveInventory</key>
        <map>
        <key>tooltip</key>
            <string>llRemoveInventory(string item)
Removes the named inventory item.</string>
        </map>
    <key>llRemoveVehicleFlags</key>
        <map>
        <key>tooltip</key>
            <string>llRemoveVehicleFlags(integer flags)
Removes the enabled bits in &apos;flags&apos;.</string>
        </map>
    <key>llReplaceAgentEnvironment</key>
        <map>
        <key>tooltip</key>
            <string>integer llReplaceAgentEnvironment(key agent_id, float transition, string environment)
Overrides the current region and parcel environment seen by an agent. This function must be executed as part of an experience.
&apos;agent_id&apos; is the key of an agent in the region and participating in the experience.
&apos;transition&apos; is the number of seconds over which to transition to the new settings.
&apos;environment&apos; is the name of an environmental setting in the object&apos;s inventory or the asset Id for an environment.</string>
        </map>
     <key>llReplaceEnvironment</key>
        <map>
        <key>tooltip</key>
            <string>integer llReplaceEnvironment(vector position, string environment, integer track_no, integer day_length, integer day_offset)
Overrides the current region and parcel environment seen by an agent. This function must be executed as part of an experience.
&apos;position&apos; is the position in the region of the parcel that will receive the new environment. To change the entire region use &lt;-1, -1, -1&gt;.
&apos;environment&apos; is the name of an environmental setting in the object's inventory or the asset ID for an environment. NULL_KEY or empty string to remove the environment.
&apos;track_no&apos; is the elevation zone to change. 0 for water, 1 for ground level. -1 to change all tracks.
&apos;day_length&apos; is the length in seconds for the day cycle. -1 to leave unchanged.
&apos;day_offset&apos; is the offset in seconds from UTC. -1 to leave unchanged.</string>
        </map>
    <key>llRequestAgentData</key>
        <map>
        <key>tooltip</key>
            <string>key llRequestAgentData(key id, integer data)
Requests data about agent id. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised.</string>
        </map>
   <key>llRequestDisplayName</key>
        <map>
        <key>tooltip</key>
            <string>key llRequestDisplayName(key id)
Requests name of an avatar. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised.</string>
        </map>
    <key>llRequestExperiencePermissions</key>
        <map>
        <key>tooltip</key>
            <string>llRequestExperiencePermissions(key agent, string name)
Asks the agent for permission to participate in an experience. NOTE: the name parameter is deprecated and its contents ignored.</string>
        </map>
    <key>llRequestInventoryData</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>key llRequestInventoryData(string name)
Requests data from object&apos;s inventory object. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised.</string>
        </map>
    <key>llRequestPermissions</key>
        <map>
        <key>tooltip</key>
            <string>llRequestPermissions(key agent, integer perm)
Asks the agent for permission to run certain classes of functions.</string>
        </map>
    <key>llRequestSecureURL</key>
        <map>
        <key>tooltip</key>
            <string>key llRequestSecureURL()
Requests one HTTPS:// (SSL) url for use by this object.
An http_request event is triggered with the results.</string>
        </map>
    <key>llRequestSimulatorData</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>key llRequestSimulatorData(string simulator, integer data)
Requests data about simulator. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised.</string>
        </map>
    <key>llRequestURL</key>
        <map>
        <key>tooltip</key>
            <string>key llRequestURL()
Requests one HTTP:// url for use by this object.
An http_request event is triggered with the results.</string>
        </map>
    <key>llRequestUserKey</key>
        <map>
        <key>tooltip</key>
            <string>key llRequestUserKey(string name)
Requests the Agent ID key for the named agent from the data server. Legacy names (with or without "Resident" for new residents) or user names may be passed to this function, case insensitive. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised.</string>
        </map>
    <key>llRequestUsername</key>
        <map>
        <key>tooltip</key>
            <string>key llRequestUsername(key id)
Requests single-word username of an avatar. Returns a handle (a key) that can be used to identify the request when the dataserver event is raised.</string>
        </map>
    <key>llResetAnimationOverride</key>
        <map>
        <key>tooltip</key>
            <string>llResetAnimationOverride(string anim_state)
Resets the animation for the given animation state to the default. Requires the runtime permission PERMISSION_OVERRIDE_ANIMATIONS.</string>
        </map>
    <key>llResetLandBanList</key>
        <map>
        <key>tooltip</key>
            <string>llResetLandBanList()
Removes all residents from the land ban list.</string>
        </map>
    <key>llResetLandPassList</key>
        <map>
        <key>tooltip</key>
            <string>llResetLandPassList()
Removes all residents from the land access/pass list.</string>
        </map>
    <key>llResetOtherScript</key>
        <map>
        <key>tooltip</key>
            <string>llResetOtherScript(string name)
Resets script name.</string>
        </map>
    <key>llResetScript</key>
        <map>
        <key>tooltip</key>
            <string>llResetScript()
Resets the script.</string>
        </map>
    <key>llResetTime</key>
        <map>
        <key>tooltip</key>
            <string>llResetTime()
Sets the script timer to zero.</string>
        </map>
    <key>llReturnObjectsByID</key>
        <map>
        <key>tooltip</key>
            <string>integer llReturnObjectsByID(list objects)
Requires the runtime permission PERMISSION_RETURN_OBJECTS.
Objects which IDs are listed in &apos;objects&apos; are returned to their owner.
Returns the number of objects that were returned to their owners or an error code (ERR_GENERIC, ERR_PARCEL_PERMISSIONS, ERR_MALFORMED_PARAMS, ERR_RUNTIME_PERMISSIONS or ERR_THROTTLED).</string>
        </map>
    <key>llReturnObjectsByOwner</key>
        <map>
        <key>tooltip</key>
            <string>integer llReturnObjectsByOwner(key owner, integer scope)
Requires the runtime permission PERMISSION_RETURN_OBJECTS.
Objects pertaining to &apos;owner&apos; in the particular &apos;scope&apos; (OBJECT_RETURN_PARCEL, OBJECT_RETURN_PARCEL_OWNER, OBJECT_RETURN_REGION) are returned.
Returns the number of objects that were returned to their owners or an error code (ERR_GENERIC, ERR_PARCEL_PERMISSIONS, ERR_MALFORMED_PARAMS, ERR_RUNTIME_PERMISSIONS or ERR_THROTTLED).</string>
        </map>
    <key>llRezAtRoot</key>
        <map>
        <key>tooltip</key>
            <string>llRezAtRoot(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object rotated to rot with its root at pos, moving at vel, using param as the start parameter.</string>
        </map>
    <key>llRezObject</key>
        <map>
        <key>tooltip</key>
            <string>llRezObject(string inventory, vector pos, vector vel, rotation rot, integer param)
Instantiates owner&apos;s inventory object at pos with velocity vel and rotation rot with start parameter param.</string>
        </map>
    <key>llRot2Angle</key>
        <map>
        <key>tooltip</key>
            <string>float llRot2Angle(rotation rot)
Returns the rotation angle represented by rot.</string>
        </map>
    <key>llRot2Axis</key>
        <map>
        <key>tooltip</key>
            <string>vector llRot2Axis(rotation rot)
Returns the rotation axis represented by rot.</string>
        </map>
    <key>llRot2Euler</key>
        <map>
        <key>tooltip</key>
            <string>vector llRot2Euler(rotation q)
Returns the Euler representation (roll, pitch, yaw) of q.</string>
        </map>
    <key>llRot2Fwd</key>
        <map>
        <key>tooltip</key>
            <string>vector llRot2Fwd(rotation q)
Returns the forward vector defined by q.</string>
        </map>
    <key>llRot2Left</key>
        <map>
        <key>tooltip</key>
            <string>vector llRot2Left(rotation q)
Returns the left vector defined by q.</string>
        </map>
    <key>llRot2Up</key>
        <map>
        <key>tooltip</key>
            <string>vector llRot2Up(rotation q)
Returns the up vector defined by q.</string>
        </map>
    <key>llRotBetween</key>
        <map>
        <key>tooltip</key>
            <string>rotation llRotBetween(vector v1, vector v2)
Returns the rotation to rotate v1 to v2.</string>
        </map>
    <key>llRotLookAt</key>
        <map>
        <key>tooltip</key>
            <string>llRotLookAt(rotation target, float strength, float damping)
Causes object to point its forward axis towards target.</string>
        </map>
    <key>llRotTarget</key>
        <map>
        <key>tooltip</key>
            <string>integer llRotTarget(rotation rot, float error)
Set rotations with error of rot as a rotational target and return an ID for the rotational target.</string>
        </map>
    <key>llRotTargetRemove</key>
        <map>
        <key>tooltip</key>
            <string>llRotTargetRemove(integer number)
Removes rotational target number registered with llRotTarget.</string>
        </map>
    <key>llRotateTexture</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llRotateTexture(float rotation, integer face)
Sets the texture rotation for the chosen face.</string>
        </map>
    <key>llRound</key>
        <map>
        <key>tooltip</key>
            <string>integer llRound(float val)
Returns val rounded to the nearest integer.</string>
        </map>
    <key>llSHA1String</key>
        <map>
        <key>tooltip</key>
            <string>string llSHA1String(string src)
Returns a string of 40 hex characters that is the SHA1 security Hash of src.</string>
        </map>
    <key>llSameGroup</key>
        <map>
        <key>tooltip</key>
            <string>integer llSameGroup(key id)
Returns TRUE if avatar id is in the same region and has the same active group, otherwise FALSE.</string>
        </map>
    <key>llSay</key>
        <map>
        <key>tooltip</key>
            <string>llSay(integer channel, string msg)
Says the text of msg on channel.</string>
        </map>
    <key>llScaleByFactor</key>
        <map>
        <key>tooltip</key>
            <string>integer llScaleByFactor(float scaling_factor)
Uniformly resizes the linkset by the given multiplicative scale factor (e.g. 2.0 to double the scale in all dimensions)
Returns TRUE if rescaling was successful or FALSE otherwise. This function only succeeds in non-physical objects and rescaling is subject to linkability rules and prim scale limits.</string>
        </map>
    <key>llScaleTexture</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llScaleTexture(float u, float v, integer face)
Sets the texture u &amp; v scales for the chosen face or ALL_SIDES.</string>
        </map>
    <key>llScriptDanger</key>
        <map>
        <key>tooltip</key>
            <string>integer llScriptDanger(vector pos)
Returns TRUE if pos is over public land, sandbox land, land that doesn&apos;t allow everyone to edit and build, or land that doesn&apos;t allow outside scripts.</string>
        </map>
    <key>llScriptProfiler</key>
        <map>
        <key>tooltip</key>
            <string>llScriptProfiler(integer flags)
Enables or disables the scripts profiling state.
Flags can be either of PROFILE_SCRIPT_NONE or PROFILE_SCRIPT_MEMORY.
Applies to Mono-compiled scripts only.</string>
        </map>
    <key>llSendRemoteData</key>
        <map>
        <key>sleep_time</key>
            <real>3</real>
        <key>tooltip</key>
            <string>key llSendRemoteData(key channel, string dest, integer idata, string sdata)
Sends an XML-RPC request to dest through channel with payload of channel (in a string), integer idata and string sdata.
Returns a key that is the message_id for the resulting remote_data events.</string>
        </map>
    <key>llSensor</key>
        <map>
        <key>tooltip</key>
            <string>llSensor(string name, key id, integer type, float range, float arc)
Performs a single scan for name and id with type (AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0).</string>
        </map>
    <key>llSensorRemove</key>
        <map>
        <key>tooltip</key>
            <string>llSensorRemove()
Removes the sensor setup by llSensorRepeat.</string>
        </map>
    <key>llSensorRepeat</key>
        <map>
        <key>tooltip</key>
            <string>llSensorRepeat(string name, key id, integer type, float range, float arc, float rate)
Sets a callback for name and id with type (AGENT_BY_LEGACY_NAME, AGENT_BY_USERNAME, ACTIVE, PASSIVE, and/or SCRIPTED) within range meters and arc radians of forward vector (name, id, and/or keytype can be empty or 0) and repeats every rate seconds.</string>
        </map>
    <key>llSetAgentEnvironment</key>
        <map>
        <key>tooltip</key>
            <string>llSetAgentEnvironment(key agent_id, float transition, list params)
Sets environment values for an individual agent in an experience.
&apos;agent_id&apos; is the key of an agent in the region and participating in the experience.
&apos;transition&apos; is the number of seconds over which to transition to the new settings. 	
&apos;params&apos; contains the parameters to retrieve from the current environment.</string>
        </map>
    <key>llSetAlpha</key>
        <map>
        <key>tooltip</key>
            <string>llSetAlpha(float alpha, integer face)
Sets the alpha on face.</string>
        </map>
    <key>llSetAngularVelocity</key>
        <map>
        <key>tooltip</key>
            <string>llSetAngularVelocity(vector force, integer local)
Applies rotational velocity with &apos;force&apos; to object and &apos;local&apos; a boolean (if TRUE uses local axis, if FALSE uses region axis).</string>
        </map>
    <key>llSetAnimatedObjectVisualParams</key>
        <map>
        <key>tooltip</key>
            <string>llSetAnimatedObjectVisualParams(list visual_params)
Takes a list of alternating params Ids (integers) and values (floats) in list &apos;visual_params&apos;, and applies them to the Animesh object containing the script calling this funtion.</string>
        </map>
    <key>llSetAnimationOverride</key>
        <map>
        <key>tooltip</key>
            <string>llSetAnimationOverride(string anim_state, string anim)
Sets the animation that will play for the given animation state. Requires the runtime permission PERMISSION_OVERRIDE_ANIMATIONS.</string>
        </map>
    <key>llSetBuoyancy</key>
        <map>
        <key>tooltip</key>
            <string>llSetBuoyancy(float buoyancy)
Sets the buoyancy of the task or object (0 is disabled, &lt; 1.0 sinks, 1.0 floats, &gt; 1.0 rises).</string>
        </map>
    <key>llSetCameraAtOffset</key>
        <map>
        <key>tooltip</key>
            <string>llSetCameraAtOffset(vector offset)
Sets the point the camera is looking at to offset for avatars that sit on the object.</string>
        </map>
    <key>llSetCameraEyeOffset</key>
        <map>
        <key>tooltip</key>
            <string>llSetCameraEyeOffset(vector offset)
Sets the camera eye offset for avatars that sit on the object.</string>
        </map>
    <key>llSetCameraParams</key>
        <map>
        <key>tooltip</key>
            <string>llSetCameraParams(list rules)
Sets multiple camera parameters at once.
List format is [ rule1, data1, rule2, data2 . . . rulen, datan ].</string>
        </map>
    <key>llSetClickAction</key>
        <map>
        <key>tooltip</key>
            <string>llSetClickAction(integer action)
Sets the action performed when a prim is clicked upon.</string>
        </map>
    <key>llSetColor</key>
        <map>
        <key>tooltip</key>
            <string>llSetColor(vector color, integer face)
Sets the color on face of the prim.</string>
        </map>
    <key>llSetContentType</key>
        <map>
        <key>tooltip</key>
            <string>llSetContentType(key request_id, integer content_type)
Sets the Internet media type of an LSL HTTP server response.
content_type may be one of CONTENT_TYPE_TEXT (default), CONTENT_TYPE_HTML, CONTENT_TYPE_XML, CONTENT_TYPE_XHTML, CONTENT_TYPE_ATOM, CONTENT_TYPE_JSON, CONTENT_TYPE_LLSD, CONTENT_TYPE_FORM or CONTENT_TYPE_RSS. Only valid for embedded browsers on content owned by the person viewing. Falls back to CONTENT_TYPE_TEXT otherwise.</string>
        </map>
    <key>llSetDamage</key>
        <map>
        <key>tooltip</key>
            <string>llSetDamage(float damage)
Sets the amount of damage that will be done when this object hits an avatar.</string>
        </map>
    <key>llSetEnvironment</key>
        <map>
        <key>tooltip</key>
            <string>integer llSetEnvironment(vector position, list params)
Overrides the environmental settings for a region or a parcel at &apos;position&apos; with the environment parameters in &apos;params&apos;.
Returns 1 on success or a negative error code among ENV_* constants.</string>
        </map>
    <key>llSetForce</key>
        <map>
        <key>tooltip</key>
            <string>llSetForce(vector force, integer local)
Applies force to the object (if the script is physical), in local coords if local == TRUE.</string>
        </map>
    <key>llSetForceAndTorque</key>
        <map>
        <key>tooltip</key>
            <string>llSetForceAndTorque(vector force, vector torque, integer local)
Sets the force and torque of object (if the script is physical), in local coords if local == TRUE.</string>
        </map>
    <key>llSetHoverHeight</key>
        <map>
        <key>tooltip</key>
            <string>llSetHoverHeight(float height, integer water, float tau)
Critically damps to a height above the ground (or water) in tau seconds.</string>
        </map>
    <key>llSetInventoryPermMask</key>
        <map>
        <key>god_only</key>
            <boolean>1</boolean>
        <key>tooltip</key>
            <string>llSetInventoryPermMask(string item, integer mask, integer value)
Sets the given permission mask to the new value on the inventory item (requires God Mode).</string>
        </map>
    <key>llSetKeyframedMotion</key>
        <map>
        <key>tooltip</key>
            <string>llSetKeyframedMotion(list keyframes, list options)
Specifies a list of times, positions, and orientations to be followed by an object.
The object will be smoothly moved between keyframes by the simulator.
list keyframes: strided keyframe list of the form:
  - vector position (optional via KFM_TRANSLATION and KFM_DATA)
  - rotation orientation (optional via KFM_ROTATION and KFM_DATA)
  - float time
list options: modifiers among:
  - KFM_COMMAND followed by one of KFM_CMD_PLAY, KFM_CMD_STOP, KFM_CMD_PAUSE.
  - KFM_MODE followed by one of KFM_FORWARD, KFM_LOOP, KFM_PING_PONG, KFM_REVERSE.
  - KFM_DATA followed by KFM_ROTATION or KFM_TRANSLATION.
Note that if KFM_COMMAND is provided in the options list, it must be the only option in the list, and cannot be specified in the same function call that sets the keyframes list.</string>
        </map>
    <key>llSetLinkAlpha</key>
        <map>
        <key>tooltip</key>
            <string>llSetLinkAlpha(integer linknumber, float alpha, integer face)
If a prim exists in the link chain at linknumber, sets face to alpha.</string>
        </map>
    <key>llSetLinkCamera</key>
        <map>
        <key>tooltip</key>
            <string>llSetLinkCamera(integer link, vector eye, vector at)
Sets the camera eye offset, and the offset that camera is looking at, for avatars that sit on the linked prim.
The two vector parameters are offsets relative to the object&apos;s center and expressed in local coordinates.</string>
        </map>
    <key>llSetLinkColor</key>
        <map>
        <key>tooltip</key>
            <string>llSetLinkColor(integer linknumber, vector color, integer face)
Sets face to color if a task exists in the link chain at linknumber.</string>
        </map>
    <key>llSetLinkMedia</key>
        <map>
        <key>tooltip</key>
            <string>integer llSetLinkMedia(integer link, integer face, list params)
Set the media params for a particular face on the &apos;link&apos;ed prim without a delay.
Returns an integer that is flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) which details the success/failure of the operation(s).
Takes the same parameters as llSetPrimMediaParams().</string>
        </map>
    <key>llSetLinkPrimitiveParams</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetLinkPrimitiveParams(integer linknumber, list rules)
Sets primitive parameters for linknumber based on rules.</string>
        </map>
    <key>llSetLinkPrimitiveParamsFast</key>
        <map>
        <key>tooltip</key>
            <string>llSetLinkPrimitiveParamsFast(integer linknumber, list rules)
Identical to llSetLinkPrimitiveParams() but executes without script delay.</string>
        </map>
    <key>llSetLinkTexture</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetLinkTexture(integer linknumber, string texture, integer face)
Sets the texture of face for a task that exists in the link chain at linknumber.</string>
        </map>
    <key>llSetLinkTextureAnim</key>
        <map>
        <key>tooltip</key>
            <string>llSetLinkTextureAnim(integer link, integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Similar to llSetTextureAnim() but applies to any prim in the link set.</string>
        </map>
    <key>llSetLocalRot</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetLocalRot(rotation rot)
Sets the rotation of a child prim relative to the root prim.</string>
        </map>
    <key>llSetMemoryLimit</key>
        <map>
        <key>tooltip</key>
            <string>integer llSetMemoryLimit(integer limit)
Request limit bytes to be reserved for this script.
Returns a success/failure flag (STATUS_OK when sucessful, another of the STATUS_* flags on failure) for whether the memory limit was set.
Only relevant for Mono-compiled scripts.</string>
        </map>
    <key>llSetObjectDesc</key>
        <map>
        <key>tooltip</key>
            <string>llSetObjectDesc(string name)
Sets the prim&apos;s description.</string>
        </map>
    <key>llSetObjectName</key>
        <map>
        <key>tooltip</key>
            <string>llSetObjectName(string name)
Sets the prim&apos;s name to the name parameter.</string>
        </map>
    <key>llSetObjectPermMask</key>
        <map>
        <key>god_only</key>
            <boolean>1</boolean>
        <key>tooltip</key>
            <string>llSetObjectPermMask(integer mask, integer value)
Sets the given permission mask to the new value on the root object the task is attached to (requires God Mode).</string>
        </map>
    <key>llSetParcelMusicURL</key>
        <map>
        <key>sleep_time</key>
            <real>2</real>
        <key>tooltip</key>
            <string>llSetParcelMusicURL(string url)
Sets the streaming audio URL for the parcel which the object is on.</string>
        </map>
    <key>llSetPayPrice</key>
        <map>
        <key>tooltip</key>
            <string>llSetPayPrice(integer price, list quick_pay_buttons)
Sets the default amount on the dialog that appears when someone chooses to pay this prim.</string>
        </map>
    <key>llSetPhysicsMaterial</key>
        <map>
        <key>tooltip</key>
            <string>llSetPhysicsMaterial(integer material_bits, float gravity_multiplier, float restitution, float friction, float density)
Sets the physics properties of the object the script is attached to.
material_bits is a bitwise combination of DENSITY, FRICTION, RESTITUTION and GRAVITY_MULTIPLIER, specifying which floats to actually apply.</string>
        </map>
    <key>llSetPos</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetPos(vector pos)
Moves the object or prim towards pos without using physics (if the script isn&apos;t physical).</string>
        </map>
    <key>llSetPrimMediaParams</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llSetPrimMediaParams(integer face, list params)
Sets the media params for a particular face on an object. If media is not already on this object, add it.
List is a set of name/value pairs in no particular order. Params not specified are unchanged, or if new media is added then set to the default specified.</string>
        </map>
    <key>llSetPrimURL</key>
        <map>
        <key>sleep_time</key>
            <real>20</real>
        <key>tooltip</key>
            <string>llSetPrimURL(string url)
Updates the URL for the web page shown on the sides of the object.</string>
        </map>
    <key>llSetPrimitiveParams</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetPrimitiveParams(list rules)
Sets the prim&apos;s parameters according to rules.</string>
        </map>
    <key>llSetRegionPos</key>
        <map>
        <key>tooltip</key>
            <string>integer llSetRegionPos(vector position)
Tries to moves the entire object so that the root prim is within 0.1m of position.
On success the object is moved and TRUE is returned, on failure the object does not change position and FALSE is returned.</string>
        </map>
    <key>llSetRemoteScriptAccessPin</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetRemoteScriptAccessPin(integer pin)
If pin is set to a non-zero number, allows a prim to have scripts remotely loaded via llRemoteLoadScriptPin when it passes in the correct pin. Otherwise, llRemoteLoadScriptPin is ignored.</string>
        </map>
    <key>llSetRot</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetRot(rotation rot)
Sets the rotation.</string>
        </map>
    <key>llSetScale</key>
        <map>
        <key>tooltip</key>
            <string>llSetScale(vector scale)
Sets the scale of the prim.</string>
        </map>
    <key>llSetScriptState</key>
        <map>
        <key>tooltip</key>
            <string>llSetScriptState(string name, integer run)
Sets the running state of the specified script.</string>
        </map>
    <key>llSetSitText</key>
        <map>
        <key>tooltip</key>
            <string>llSetSitText(string text)
Displays text rather than the default &apos;Sit Here&apos; in the pie menu.</string>
        </map>
    <key>llSetSoundQueueing</key>
        <map>
        <key>tooltip</key>
            <string>llSetSoundQueueing(integer queue)
Sets whether attached sounds wait for the current sound to finish (If queue == TRUE then queuing is enabled, if FALSE queuing is disabled [default]).</string>
        </map>
    <key>llSetSoundRadius</key>
        <map>
        <key>tooltip</key>
            <string>llSetSoundRadius(float radius)
Establishes a hard cut-off radius for audibility of scripted sounds (both attached and triggered).</string>
        </map>
    <key>llSetStatus</key>
        <map>
        <key>tooltip</key>
            <string>llSetStatus(integer status, integer value)
Sets status (STATUS_PHYSICS, STATUS_PHANTOM, STATUS_BLOCK_GRAB, STATUS_BLOCK_GRAB_OBJECT, STATUS_ROTATE_X, STATUS_ROTATE_Y, and/or STATUS_ROTATE_Z) to value.</string>
        </map>
    <key>llSetText</key>
        <map>
        <key>tooltip</key>
            <string>llSetText(string text, vector color, float alpha)
Displays text that hovers over the prim with specific color and translucency specified with alpha.</string>
        </map>
    <key>llSetTexture</key>
        <map>
        <key>sleep_time</key>
            <real>0.2</real>
        <key>tooltip</key>
            <string>llSetTexture(string texture, integer face)
Sets the texture of face or ALL_SIDES.</string>
        </map>
    <key>llSetTextureAnim</key>
        <map>
        <key>tooltip</key>
            <string>llSetTextureAnim(integer mode, integer face, integer sizex, integer sizey, float start, float length, float rate)
Animates the texture on the specified face/faces.</string>
        </map>
    <key>llSetTimerEvent</key>
        <map>
        <key>tooltip</key>
            <string>llSetTimerEvent(float sec)
Causes the timer event to be triggered a maximum of once every sec seconds.</string>
        </map>
    <key>llSetTorque</key>
        <map>
        <key>tooltip</key>
            <string>llSetTorque(vector torque, integer local)
Sets the torque of object (if the script is physical), in local coords if local == TRUE.</string>
        </map>
    <key>llSetTouchText</key>
        <map>
        <key>tooltip</key>
            <string>llSetTouchText(string text)
Displays text rather than the default &apos;Touch&apos; in the pie menu.</string>
        </map>
    <key>llSetVehicleFlags</key>
        <map>
        <key>tooltip</key>
            <string>llSetVehicleFlags(integer flags)
Sets the enabled bits in &apos;flags&apos;.</string>
        </map>
    <key>llSetVehicleFloatParam</key>
        <map>
        <key>tooltip</key>
            <string>llSetVehicleFloatParam(integer param, float value)
Sets the specified vehicle float parameter.</string>
        </map>
    <key>llSetVehicleRotationParam</key>
        <map>
        <key>tooltip</key>
            <string>llSetVehicleVectorParam(integer param, rotation rot)
Sets the specified vehicle rotation parameter.</string>
        </map>
    <key>llSetVehicleType</key>
        <map>
        <key>tooltip</key>
            <string>llSetVehicleType(integer type)
Sets the vehicle to one of the default types.</string>
        </map>
    <key>llSetVehicleVectorParam</key>
        <map>
        <key>tooltip</key>
            <string>llSetVehicleVectorParam(integer param, vector vec)
Sets the specified vehicle vector parameter.</string>
        </map>
    <key>llSetVelocity</key>
        <map>
        <key>tooltip</key>
            <string>llSetVelocity(vector force, integer local)
Applies velocity with &apos;force&apos; to object and &apos;local&apos; a boolean (if TRUE, force is treated as a local directional vector instead of region directional vector).</string>
        </map>
    <key>llShout</key>
        <map>
        <key>tooltip</key>
            <string>llShout(integer channel, string msg)
Shouts the text of msg on channel.</string>
        </map>
    <key>llSin</key>
        <map>
        <key>tooltip</key>
            <string>float llSin(float theta)
Returns the sine of theta (theta in radians).</string>
        </map>
    <key>llSitOnLink</key>
        <map>
        <key>tooltip</key>
            <string>integer llSitOnLink(key agent_id, integer link)
The avatar specified by agent_id is forced to sit on the sit target of the prim indicated by the link parameter. This function must be called from an experience enabled script. Returns 1 if successful, or any of the negative SIT_* error codes.</string>
        </map>
    <key>llSitTarget</key>
        <map>
        <key>tooltip</key>
            <string>llSitTarget(vector offset, rotation rot)
Sets the sit location for the prim.  If offset == &lt;0,0,0&gt; then the sit target is removed.</string>
        </map>
    <key>llSleep</key>
        <map>
        <key>tooltip</key>
            <string>llSleep(float sec)
Puts the script to sleep for sec seconds.</string>
        </map>
    <key>llSound</key>
        <map>
        <key>tooltip</key>
            <string>llSound(string sound, float volume, integer queue, integer loop)
Plays sound at volume and whether it should loop or not.</string>
        </map>
    <key>llSoundPreload</key>
        <map>
        <key>tooltip</key>
            <string>llSoundPreload(string sound)
Preloads a sound on viewers within range.</string>
        </map>
    <key>llSqrt</key>
        <map>
        <key>tooltip</key>
            <string>float llSqrt(float val)
Returns the square root of val, or returns 0 and triggers a Math Error for imaginary results.</string>
        </map>
    <key>llStartAnimation</key>
        <map>
        <key>tooltip</key>
            <string>llStartAnimation(string anim)
Starts animation anim for agent that granted PERMISSION_TRIGGER_ANIMATION if the permission has not been revoked.</string>
        </map>
    <key> llStartObjectAnimation</key>
        <map>
        <key>tooltip</key>
            <string> llStartObjectAnimation(string anim)
Starts animation anim for the current object. anim must be the name of an animation in the inventory of that object.</string>
        </map>
    <key>llStopAnimation</key>
        <map>
        <key>tooltip</key>
            <string>llStopAnimation(string anim)
Stops animation anim for agent that granted permission.</string>
        </map>
    <key>  llStopObjectAnimation</key>
        <map>
        <key>tooltip</key>
            <string> llStartObjectAnimation(string anim)
Stops animation anim for the current object. anim must be the name or the UUID of an animation in the inventory of that object.</string>
        </map>
    <key>llStopHover</key>
        <map>
        <key>tooltip</key>
            <string>llStopHover()
Stops hovering to a height.</string>
        </map>
    <key>llStopLookAt</key>
        <map>
        <key>tooltip</key>
            <string>llStopLookAt()
Stops causing object to point at a target.</string>
        </map>
    <key>llStopMoveToTarget</key>
        <map>
        <key>tooltip</key>
            <string>llStopMoveToTarget()
Stops critically damped motion.</string>
        </map>
    <key>llStopPointAt</key>
        <map>
        <key>tooltip</key>
            <string>llStopPointAt()
Stops pointing agent that owns object.</string>
        </map>
    <key>llStopSound</key>
        <map>
        <key>tooltip</key>
            <string>llStopSound()
Stops currently attached sound.</string>
        </map>
    <key>llStringLength</key>
        <map>
        <key>tooltip</key>
            <string>integer llStringLength(string str)
Returns the length of string.</string>
        </map>
    <key>llStringToBase64</key>
        <map>
        <key>tooltip</key>
            <string>string llStringToBase64(string str)
Converts a string to the Base64 representation of the string.</string>
        </map>
    <key>llStringTrim</key>
        <map>
        <key>tooltip</key>
            <string>string llStringTrim(string src, integer trim_type)
Trims the leading and/or trailing white spaces from a string.
trim_type can be STRING_TRIM, STRING_TRIM_HEAD or STRING_TRIM_TAIL.</string>
        </map>
    <key>llSubStringIndex</key>
        <map>
        <key>tooltip</key>
            <string>integer llSubStringIndex(string source, string pattern)
Returns an integer that is the index in source where pattern first appears.
(Returns -1 if not found).</string>
        </map>
    <key>llTakeCamera</key>
        <map>
        <key>tooltip</key>
            <string>llTakeCamera(key avatar)
Moves avatar&apos;s viewpoint to task.</string>
        </map>
    <key>llTakeControls</key>
        <map>
        <key>tooltip</key>
            <string>llTakeControls(integer controls, integer accept, integer pass_on)
Allows for intercepting keyboard and mouse clicks from the agent the script has permissions for.</string>
        </map>
    <key>llTan</key>
        <map>
        <key>tooltip</key>
            <string>float llTan(float theta)
Returns the tangent of theta (theta in radians).</string>
        </map>
    <key>llTarget</key>
        <map>
        <key>tooltip</key>
            <string>integer llTarget(vector position, float range)
Sets positions within range of position as a target and return an ID for the target.</string>
        </map>
    <key>llTargetedEmail</key>
        <map>
        <key>tooltip</key>
            <string>llTargetedEmail(integer target, string subject, string message)
Sends an email to the owner or creator (selected by &apos;target&apos;) of the object with &apos;subject&apos; and &apos;message&apos;.</string>
        </map>
    <key>llTargetOmega</key>
        <map>
        <key>tooltip</key>
            <string>llTargetOmega(vector axis, float spinrate, float gain)
Rotates the object around axis at spinrate with strength gain.</string>
        </map>
    <key>llTargetRemove</key>
        <map>
        <key>tooltip</key>
            <string>llTargetRemove(integer number)
Removes positional target number registered with llTarget.</string>
        </map>
    <key>llTeleportAgent</key>
        <map>
        <key>tooltip</key>
            <string>llTeleportAgent(key avatar, string landmark, vector position, vector look_at)
Teleports avatar to a landmark stored in the object&apos;s inventory. If no landmark is provided (an empty string), the avatar is teleported to the location position in the current region. In either case, the avatar is turned to face the position given by look_at in local coordinates. To run this function the script must request and obtain the PERMISSION_TELEPORT permission.</string>
        </map>
    <key>llTeleportAgentGlobalCoords</key>
        <map>
        <key>tooltip</key>
            <string>llTeleportAgent(key avatar, vector global_coordinates, vector region_coordinates, vector look_at)
Teleports avatar to region_coordinates within a region at the specified global_coordinates. The agent lands facing the position defined by look_at local coordinates. To run this function the script must request and obtain the PERMISSION_TELEPORT permission.</string>
        </map>
    <key>llTeleportAgentHome</key>
        <map>
        <key>sleep_time</key>
            <real>5</real>
        <key>tooltip</key>
            <string>llTeleportAgentHome(key id)
Teleports avatar on the owner&apos;s land to their home location without any warning.</string>
        </map>
    <key>llTextBox</key>
        <map>
        <key>sleep_time</key>
            <real>1</real>
        <key>tooltip</key>
            <string>llTextBox(key avatar, string message, integer chat_channel)
Shows a dialog box on the avatar&apos;s screen with the message.
It contains a text box for input, and if entered that text is chatted on chat_channel.</string>
        </map>
    <key>llToLower</key>
        <map>
        <key>tooltip</key>
            <string>string llToLower(string src)
Returns a string that is src with all lower-case characters.</string>
        </map>
    <key>llToUpper</key>
        <map>
        <key>tooltip</key>
            <string>string llToUpper(string src)
Returns a string that is src with all upper-case characters.</string>
        </map>
    <key>llTransferLindenDollars</key>
        <map>
        <key>tooltip</key>
            <string>key llTransferLindenDollars(key id, integer amount)
Attempt to transfer amount of L$ from the owner of the object to &apos;id&apos;. Requires PERMISSION_DEBIT.
Returns a key used in a matching transaction_result() event for the success or failure of the transfer.</string>
        </map>
    <key>llTriggerSound</key>
        <map>
        <key>tooltip</key>
            <string>llTriggerSound(string sound, float volume)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object.</string>
        </map>
    <key>llTriggerSoundLimited</key>
        <map>
        <key>tooltip</key>
            <string>llTriggerSoundLimited(string sound, float volume, vector top_north_east, vector bottom_south_west)
Plays sound at volume (0.0 - 1.0), centered at but not attached to object, limited to the box defined by vectors top_north_east and bottom_south_west.</string>
        </map>
    <key>llUnSit</key>
        <map>
        <key>tooltip</key>
            <string>key llUnSit(key id)
If avatar identified by id is sitting on the object the script is attached to or is over land owned by the object&apos;s owner, the avatar is forced to stand up.</string>
        </map>
    <key>llUnescapeURL</key>
        <map>
        <key>tooltip</key>
            <string>string llUnescapeURL(string url)
Returns an unescaped/ unencoded version of url, replacing %20 with spaces etc.</string>
        </map>
    <key>llUpdateCharacter</key>
        <map>
        <key>tooltip</key>
            <string>llUpdateCharacter(list options)
Updates settings for a character (same settings as for llCreateCharacter()).
&apos;options&apos; is a list containing the configuration options (CHARACTER_DESIRED_SPEED, CHARACTER_RADIUS, CHARACTER_LENGTH, CHARACTER_ORIENTATION, TRAVERSAL_TYPE, CHARACTER_TYPE, CHARACTER_AVOIDANCE_MODE, CHARACTER_MAX_ACCEL, CHARACTER_MAX_DECEL, CHARACTER_DESIRED_TURN_SPEED, CHARACTER_MAX_TURN_RADIUS, CHARACTER_MAX_SPEED, CHARACTER_ACCOUNT_FOR_SKIPPED_FRAMES, CHARACTER_STAY_WITHIN_PARCEL), each followed with their associated value.</string>
        </map>
    <key>llUpdateKeyValue</key>
        <map>
        <key>tooltip</key>
            <string>key llUpdateKeyValue(string key_name, string value, integer checked, string original_value)
Starts an asynchronous transaction to update a key-value pair associated with the given experience key with the given key and value. &apos;checked&apos; is a boolean (TRUE if the original value is given and the update should be checked to make sure it is atomic). Returns a handle key for use in the dataserver callback.</string>
        </map>
    <key>llVecDist</key>
        <map>
        <key>tooltip</key>
            <string>float llVecDist(vector v1, vector v2)
Returns the 3D distance between v1 and v2.</string>
        </map>
    <key>llVecMag</key>
        <map>
        <key>tooltip</key>
            <string>float llVecMag(vector v)
Returns the magnitude of v.</string>
        </map>
    <key>llVecNorm</key>
        <map>
        <key>tooltip</key>
            <string>vector llVecNorm(vector v)
Returns the v normalized.</string>
        </map>
    <key>llVolumeDetect</key>
        <map>
        <key>tooltip</key>
            <string>llVolumeDetect(integer detect)
If detect = TRUE, object works much like Phantom, but triggers collision_start and collision_end events when other objects start and stop interpenetrating.
Must be applied to the root prim.</string>
        </map>
    <key>llWanderWithin</key>
        <map>
        <key>tooltip</key>
            <string>llWanderWithin(vector origin, vector dist list options)
Sets a character to wander about a central spot within a specified radius.
&apos;origin&apos; central point to wander about.
&apos;dist&apos; sets how far the character may wander from origin, along each world-aligned axis.
&apos;options&apos; is a list containing options (WANDER_PAUSE_AT_WAYPOINTS) with their associated parameter.</string>
        </map>
    <key>llWater</key>
        <map>
        <key>tooltip</key>
            <string>float llWater(vector offset)
Returns the water height below the object position + offset.</string>
        </map>
    <key>llWhisper</key>
        <map>
        <key>tooltip</key>
            <string>llWhisper(integer channel, string msg)
Whispers the text of msg on channel.</string>
        </map>
    <key>llWind</key>
        <map>
        <key>tooltip</key>
            <string>vector llWind(vector offset)
Returns the wind velocity at the object position + offset.</string>
        </map>
    <key>llXorBase64</key>
        <map>
        <key>tooltip</key>
            <string>string llXorBase64(string str1, string str2)
Returns a string that is a Base64 XOR of Base64-formatted input strings, str1 and str2.
Replaces the old, buggy llXorBase64StringsCorrect() and llXorBase64Strings() functions.</string>
        </map>
    <key>llXorBase64Strings</key>
        <map>
        <key>sleep_time</key>
            <real>0.3</real>
        <key>tooltip</key>
            <string>string llXorBase64Strings(string s1, string s2)
DEPRECATED !  Please use llXorBase64() instead.
Incorrectly performs an exclusive or on two Base64 strings and returns a Base64 string.</string>
        </map>
    <key>llXorBase64StringsCorrect</key>
        <map>
        <key>tooltip</key>
            <string>string llXorBase64StringsCorrect(string s1, string s2)
DEPRECATED !  Please use llXorBase64() instead.
Performs an exclusive or on two Base64 strings and returns a Base64 string. Doesn&apos;t work properly when s2 contains NULLs.</string>
        </map>
    </map>
</llsd>
